
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001572  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000146  00800060  00001572  00001626  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000050  008001a6  008001a6  0000176c  2**0
                  ALLOC
  3 .eeprom       00000009  00810000  00810000  0000176c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000000a0  00000000  00000000  00001775  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000050b  00000000  00000000  00001815  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001302  00000000  00000000  00001d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000894  00000000  00000000  00003022  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000157d  00000000  00000000  000038b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e0  00000000  00000000  00004e34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000623  00000000  00000000  00005114  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b5e  00000000  00000000  00005737  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00006295  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1a c0       	rjmp	.+52     	; 0x36 <__ctors_end>
       2:	34 c0       	rjmp	.+104    	; 0x6c <__bad_interrupt>
       4:	33 c0       	rjmp	.+102    	; 0x6c <__bad_interrupt>
       6:	32 c0       	rjmp	.+100    	; 0x6c <__bad_interrupt>
       8:	31 c0       	rjmp	.+98     	; 0x6c <__bad_interrupt>
       a:	30 c0       	rjmp	.+96     	; 0x6c <__bad_interrupt>
       c:	2f c0       	rjmp	.+94     	; 0x6c <__bad_interrupt>
       e:	2f c0       	rjmp	.+94     	; 0x6e <__vector_7>
      10:	2d c0       	rjmp	.+90     	; 0x6c <__bad_interrupt>
      12:	2c c0       	rjmp	.+88     	; 0x6c <__bad_interrupt>
      14:	2b c0       	rjmp	.+86     	; 0x6c <__bad_interrupt>
      16:	09 c4       	rjmp	.+2066   	; 0x82a <__vector_11>
      18:	29 c0       	rjmp	.+82     	; 0x6c <__bad_interrupt>
      1a:	28 c0       	rjmp	.+80     	; 0x6c <__bad_interrupt>
      1c:	7f c5       	rjmp	.+2814   	; 0xb1c <__vector_14>
      1e:	26 c0       	rjmp	.+76     	; 0x6c <__bad_interrupt>
      20:	25 c0       	rjmp	.+74     	; 0x6c <__bad_interrupt>
      22:	24 c0       	rjmp	.+72     	; 0x6c <__bad_interrupt>
      24:	23 c0       	rjmp	.+70     	; 0x6c <__bad_interrupt>

00000026 <table>:
      26:	00 00 ff 00 00 00 00 01 01 00 00 00 00 ff 00 00     ................

00000036 <__ctors_end>:
      36:	11 24       	eor	r1, r1
      38:	1f be       	out	0x3f, r1	; 63
      3a:	cf e5       	ldi	r28, 0x5F	; 95
      3c:	d4 e0       	ldi	r29, 0x04	; 4
      3e:	de bf       	out	0x3e, r29	; 62
      40:	cd bf       	out	0x3d, r28	; 61

00000042 <__do_copy_data>:
      42:	11 e0       	ldi	r17, 0x01	; 1
      44:	a0 e6       	ldi	r26, 0x60	; 96
      46:	b0 e0       	ldi	r27, 0x00	; 0
      48:	e2 e7       	ldi	r30, 0x72	; 114
      4a:	f5 e1       	ldi	r31, 0x15	; 21
      4c:	02 c0       	rjmp	.+4      	; 0x52 <.do_copy_data_start>

0000004e <.do_copy_data_loop>:
      4e:	05 90       	lpm	r0, Z+
      50:	0d 92       	st	X+, r0

00000052 <.do_copy_data_start>:
      52:	a6 3a       	cpi	r26, 0xA6	; 166
      54:	b1 07       	cpc	r27, r17
      56:	d9 f7       	brne	.-10     	; 0x4e <.do_copy_data_loop>

00000058 <__do_clear_bss>:
      58:	11 e0       	ldi	r17, 0x01	; 1
      5a:	a6 ea       	ldi	r26, 0xA6	; 166
      5c:	b1 e0       	ldi	r27, 0x01	; 1
      5e:	01 c0       	rjmp	.+2      	; 0x62 <.do_clear_bss_start>

00000060 <.do_clear_bss_loop>:
      60:	1d 92       	st	X+, r1

00000062 <.do_clear_bss_start>:
      62:	a6 3f       	cpi	r26, 0xF6	; 246
      64:	b1 07       	cpc	r27, r17
      66:	e1 f7       	brne	.-8      	; 0x60 <.do_clear_bss_loop>
      68:	9c d2       	rcall	.+1336   	; 0x5a2 <main>
      6a:	81 ca       	rjmp	.-2814   	; 0xfffff56e <__eeprom_end+0xff7ef565>

0000006c <__bad_interrupt>:
      6c:	c9 cf       	rjmp	.-110    	; 0x0 <__vectors>

0000006e <__vector_7>:
// halbe Auflösung
const int8_t table[16] PROGMEM = {0,0,-1,0,0,0,0,1,1,0,0,0,0,-1,0,0}; 

#define DEF_BOUNCE_CNT 45
ISR( TIMER1_COMPB_vect )             // 1ms fuer manuelle Eingabe
{
      6e:	1f 92       	push	r1
      70:	0f 92       	push	r0
      72:	0f b6       	in	r0, 0x3f	; 63
      74:	0f 92       	push	r0
      76:	11 24       	eor	r1, r1
      78:	8f 93       	push	r24
      7a:	ef 93       	push	r30
      7c:	ff 93       	push	r31
    //read the rotary encoder
	static int8_t last=0;           // alten Wert speichern
	static int8_t bounce_counter;           // debouncing for buttons
    last = (last << 2)  & 0x0F;
      7e:	80 91 aa 01 	lds	r24, 0x01AA
      82:	88 0f       	add	r24, r24
      84:	88 0f       	add	r24, r24
      86:	8c 70       	andi	r24, 0x0C	; 12
      88:	80 93 aa 01 	sts	0x01AA, r24
    if (PHASE_A) last |=2;
      8c:	b6 9b       	sbis	0x16, 6	; 22
      8e:	03 c0       	rjmp	.+6      	; 0x96 <__vector_7+0x28>
      90:	82 60       	ori	r24, 0x02	; 2
      92:	80 93 aa 01 	sts	0x01AA, r24
    if (PHASE_B) last |=1;
      96:	b7 99       	sbic	0x16, 7	; 22
      98:	33 c0       	rjmp	.+102    	; 0x100 <__vector_7+0x92>
    enc_delta += pgm_read_byte(&table[last]);
      9a:	e8 2f       	mov	r30, r24
      9c:	ff 27       	eor	r31, r31
      9e:	e7 fd       	sbrc	r30, 7
      a0:	f0 95       	com	r31
      a2:	ea 5d       	subi	r30, 0xDA	; 218
      a4:	ff 4f       	sbci	r31, 0xFF	; 255
      a6:	e4 91       	lpm	r30, Z+
      a8:	80 91 f4 01 	lds	r24, 0x01F4
      ac:	e8 0f       	add	r30, r24
      ae:	e0 93 f4 01 	sts	0x01F4, r30
	
	//read and debounce the buttons 
	
	if(bounce_counter== 0 && mode_pressed == 0 && bit_is_clear(PINC, MODE_BUTTON)){ //mode button event processed, and new press detected
      b2:	80 91 a9 01 	lds	r24, 0x01A9
      b6:	88 23       	and	r24, r24
      b8:	69 f0       	breq	.+26     	; 0xd4 <__vector_7+0x66>
	}
	if(bounce_counter== 0 && ok_pressed == 0 && bit_is_clear(PINC, OK_BUTTON)){ //ok button event processed, and new press detected
		ok_pressed = 1;	
		bounce_counter = DEF_BOUNCE_CNT;
	}
	if (bounce_counter >0) bounce_counter --;
      ba:	18 16       	cp	r1, r24
      bc:	1c f4       	brge	.+6      	; 0xc4 <__vector_7+0x56>
      be:	81 50       	subi	r24, 0x01	; 1
      c0:	80 93 a9 01 	sts	0x01A9, r24
}
      c4:	ff 91       	pop	r31
      c6:	ef 91       	pop	r30
      c8:	8f 91       	pop	r24
      ca:	0f 90       	pop	r0
      cc:	0f be       	out	0x3f, r0	; 63
      ce:	0f 90       	pop	r0
      d0:	1f 90       	pop	r1
      d2:	18 95       	reti
    if (PHASE_B) last |=1;
    enc_delta += pgm_read_byte(&table[last]);
	
	//read and debounce the buttons 
	
	if(bounce_counter== 0 && mode_pressed == 0 && bit_is_clear(PINC, MODE_BUTTON)){ //mode button event processed, and new press detected
      d4:	80 91 ad 01 	lds	r24, 0x01AD
      d8:	88 23       	and	r24, r24
      da:	39 f4       	brne	.+14     	; 0xea <__vector_7+0x7c>
      dc:	9d 99       	sbic	0x13, 5	; 19
      de:	05 c0       	rjmp	.+10     	; 0xea <__vector_7+0x7c>
	
		mode_pressed = 1;
      e0:	81 e0       	ldi	r24, 0x01	; 1
      e2:	80 93 ad 01 	sts	0x01AD, r24
	}
	if(bounce_counter== 0 && ok_pressed == 0 && bit_is_clear(PINC, OK_BUTTON)){ //ok button event processed, and new press detected
		ok_pressed = 1;	
		bounce_counter = DEF_BOUNCE_CNT;
	}
	if (bounce_counter >0) bounce_counter --;
      e6:	8d e2       	ldi	r24, 0x2D	; 45
      e8:	ea cf       	rjmp	.-44     	; 0xbe <__vector_7+0x50>
	if(bounce_counter== 0 && mode_pressed == 0 && bit_is_clear(PINC, MODE_BUTTON)){ //mode button event processed, and new press detected
	
		mode_pressed = 1;
		bounce_counter = DEF_BOUNCE_CNT;
	}
	if(bounce_counter== 0 && ok_pressed == 0 && bit_is_clear(PINC, OK_BUTTON)){ //ok button event processed, and new press detected
      ea:	80 91 d7 01 	lds	r24, 0x01D7
      ee:	88 23       	and	r24, r24
      f0:	49 f7       	brne	.-46     	; 0xc4 <__vector_7+0x56>
      f2:	9c 99       	sbic	0x13, 4	; 19
      f4:	e7 cf       	rjmp	.-50     	; 0xc4 <__vector_7+0x56>
		ok_pressed = 1;	
      f6:	81 e0       	ldi	r24, 0x01	; 1
      f8:	80 93 d7 01 	sts	0x01D7, r24
		bounce_counter = DEF_BOUNCE_CNT;
      fc:	8c e2       	ldi	r24, 0x2C	; 44
      fe:	e0 cf       	rjmp	.-64     	; 0xc0 <__vector_7+0x52>
    //read the rotary encoder
	static int8_t last=0;           // alten Wert speichern
	static int8_t bounce_counter;           // debouncing for buttons
    last = (last << 2)  & 0x0F;
    if (PHASE_A) last |=2;
    if (PHASE_B) last |=1;
     100:	81 60       	ori	r24, 0x01	; 1
     102:	80 93 aa 01 	sts	0x01AA, r24
     106:	c9 cf       	rjmp	.-110    	; 0x9a <__vector_7+0x2c>

00000108 <read_encoder>:

void read_encoder( void )         // Encoder auslesen
{
  // atomarer Variablenzugriff  
  //cli();
  encoder = enc_delta;
     108:	80 91 f4 01 	lds	r24, 0x01F4
     10c:	80 93 cb 01 	sts	0x01CB, r24
  enc_delta = 0;
     110:	10 92 f4 01 	sts	0x01F4, r1
  //sei();
}
     114:	08 95       	ret

00000116 <restart>:


bool restart (void){
	//reset

	asm("ldi r30,0"); asm("ldi r31,0"); asm("ijmp");
     116:	e0 e0       	ldi	r30, 0x00	; 0
     118:	f0 e0       	ldi	r31, 0x00	; 0
     11a:	09 94       	ijmp
	return true; //we never reach this
};
     11c:	81 e0       	ldi	r24, 0x01	; 1
     11e:	08 95       	ret

00000120 <discharge_ok_btn>:
	print_voltage_current();
	
};

bool discharge_ok_btn(void){
	SWITCH_DISCHARGING_OFF;
     120:	c5 98       	cbi	0x18, 5	; 24
	return true;
}
     122:	81 e0       	ldi	r24, 0x01	; 1
     124:	08 95       	ret

00000126 <timer_init>:
};

void timer_init(void){

  //timer 0 on 1 milisecond
  TCCR1B = (1<<WGM12) | (1<<CS01) | (1<<CS00);     // CTC, XTAL / 64
     126:	8b e0       	ldi	r24, 0x0B	; 11
     128:	8e bd       	out	0x2e, r24	; 46
  OCR1B = (uint8_t)(F_CPU / 64.0 * 1e-3 - 0.5);     // 1ms
     12a:	8c e7       	ldi	r24, 0x7C	; 124
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	99 bd       	out	0x29, r25	; 41
     130:	88 bd       	out	0x28, r24	; 40
  TIMSK |= 1<<OCIE1B;
     132:	89 b7       	in	r24, 0x39	; 57
     134:	88 60       	ori	r24, 0x08	; 8
     136:	89 bf       	out	0x39, r24	; 57
  
   //OCR1A is used to control the constant current source
   OCR1A = settings.target_charging_current; //pwm 0
     138:	80 91 af 01 	lds	r24, 0x01AF
     13c:	90 91 b0 01 	lds	r25, 0x01B0
     140:	9b bd       	out	0x2b, r25	; 43
     142:	8a bd       	out	0x2a, r24	; 42
  // Set 8 bit Phase correct PWM Mode for channel 1 + 2(A/B)
  
  //PWM OC1A init
  //TCCR1A &= ~(1 << WGM11);  // 8bit Phase correct CH1
  //TCCR1A |=  (1 << WGM10);  // 8bit Phase correct CH1
  TCCR1A |= (1 << WGM11);  // 10bit Phase correct CH1
     144:	8f b5       	in	r24, 0x2f	; 47
     146:	82 60       	ori	r24, 0x02	; 2
     148:	8f bd       	out	0x2f, r24	; 47
  TCCR1A |=  (1 << WGM10);  // 10bit Phase correct CH1
     14a:	8f b5       	in	r24, 0x2f	; 47
     14c:	81 60       	ori	r24, 0x01	; 1
     14e:	8f bd       	out	0x2f, r24	; 47
  
// Connect output Pin channel 1
  TCCR1A |=  (1 << COM1A1);   
     150:	8f b5       	in	r24, 0x2f	; 47
     152:	80 68       	ori	r24, 0x80	; 128
     154:	8f bd       	out	0x2f, r24	; 47
  TCCR1A &= ~(1 << COM1A0);
     156:	8f b5       	in	r24, 0x2f	; 47
     158:	8f 7b       	andi	r24, 0xBF	; 191
     15a:	8f bd       	out	0x2f, r24	; 47
  
 
}
     15c:	08 95       	ret

0000015e <f_restart>:
	//lcd_gotoxy(2,1); 
	//lcd_puts(buff);
};

void f_restart (void){
	lcd_gotoxy(0,0); 
     15e:	80 e0       	ldi	r24, 0x00	; 0
     160:	60 e0       	ldi	r22, 0x00	; 0
     162:	c0 d5       	rcall	.+2944   	; 0xce4 <lcd_gotoxy>
	lcd_puts("Press OK to restart"); 
     164:	80 e6       	ldi	r24, 0x60	; 96
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	1b d6       	rcall	.+3126   	; 0xda0 <lcd_puts>
};
     16a:	08 95       	ret

0000016c <f_set_batt_type>:
};

#define NO_OF_BAT_MENU_OPTS (sizeof batMenuItems/sizeof batMenuItems[0])

void f_set_batt_type (void){
	if (encoder > 0) {
     16c:	90 91 cb 01 	lds	r25, 0x01CB
     170:	19 16       	cp	r1, r25
     172:	3c f4       	brge	.+14     	; 0x182 <f_set_batt_type+0x16>
		circular_inc(settings.batt_type, NO_OF_BAT_MENU_OPTS);
     174:	80 91 ae 01 	lds	r24, 0x01AE
     178:	86 30       	cpi	r24, 0x06	; 6
     17a:	b0 f4       	brcc	.+44     	; 0x1a8 <f_set_batt_type+0x3c>
     17c:	8f 5f       	subi	r24, 0xFF	; 255
     17e:	80 93 ae 01 	sts	0x01AE, r24
	};
	if (encoder < 0) {
     182:	97 fd       	sbrc	r25, 7
     184:	15 c0       	rjmp	.+42     	; 0x1b0 <f_set_batt_type+0x44>
		circular_dec(settings.batt_type, NO_OF_BAT_MENU_OPTS);
	}
	
	lcd_gotoxy(2,1); 
     186:	82 e0       	ldi	r24, 0x02	; 2
     188:	61 e0       	ldi	r22, 0x01	; 1
     18a:	ac d5       	rcall	.+2904   	; 0xce4 <lcd_gotoxy>
	lcd_puts(batMenuItems[settings.batt_type]);
     18c:	e0 91 ae 01 	lds	r30, 0x01AE
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	ee 0f       	add	r30, r30
     194:	ff 1f       	adc	r31, r31
     196:	e0 5c       	subi	r30, 0xC0	; 192
     198:	fe 4f       	sbci	r31, 0xFE	; 254
     19a:	80 81       	ld	r24, Z
     19c:	91 81       	ldd	r25, Z+1	; 0x01
     19e:	00 d6       	rcall	.+3072   	; 0xda0 <lcd_puts>
	lcd_puts("        "); //padding to clean previous print
     1a0:	84 e7       	ldi	r24, 0x74	; 116
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	fd d5       	rcall	.+3066   	; 0xda0 <lcd_puts>
};
     1a6:	08 95       	ret

#define NO_OF_BAT_MENU_OPTS (sizeof batMenuItems/sizeof batMenuItems[0])

void f_set_batt_type (void){
	if (encoder > 0) {
		circular_inc(settings.batt_type, NO_OF_BAT_MENU_OPTS);
     1a8:	10 92 ae 01 	sts	0x01AE, r1
	};
	if (encoder < 0) {
     1ac:	97 ff       	sbrs	r25, 7
     1ae:	eb cf       	rjmp	.-42     	; 0x186 <f_set_batt_type+0x1a>
		circular_dec(settings.batt_type, NO_OF_BAT_MENU_OPTS);
     1b0:	80 91 ae 01 	lds	r24, 0x01AE
     1b4:	88 23       	and	r24, r24
     1b6:	19 f4       	brne	.+6      	; 0x1be <f_set_batt_type+0x52>
     1b8:	10 92 ae 01 	sts	0x01AE, r1
     1bc:	e4 cf       	rjmp	.-56     	; 0x186 <f_set_batt_type+0x1a>
     1be:	81 50       	subi	r24, 0x01	; 1
     1c0:	80 93 ae 01 	sts	0x01AE, r24
     1c4:	e0 cf       	rjmp	.-64     	; 0x186 <f_set_batt_type+0x1a>

000001c6 <f_wait_start>:
	SWITCH_DISCHARGING_OFF;
	return true;
}

void f_wait_start (void){
	lcd_gotoxy(0,0); 
     1c6:	80 e0       	ldi	r24, 0x00	; 0
     1c8:	60 e0       	ldi	r22, 0x00	; 0
     1ca:	8c d5       	rcall	.+2840   	; 0xce4 <lcd_gotoxy>
	lcd_puts("Press OK to charge"); 
     1cc:	8d e7       	ldi	r24, 0x7D	; 125
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	e7 d5       	rcall	.+3022   	; 0xda0 <lcd_puts>
};
     1d2:	08 95       	ret

000001d4 <charge_ok_btn>:
	}
	print_voltage_current();
};

bool charge_ok_btn(void){
	if (charge_mode == CHARGING_DONE){
     1d4:	80 91 d4 01 	lds	r24, 0x01D4
     1d8:	81 30       	cpi	r24, 0x01	; 1
     1da:	b9 f0       	breq	.+46     	; 0x20a <charge_ok_btn+0x36>
		mode = 0;
		restart();
		return true;
	} else {
		lcd_clrscr();
     1dc:	96 d5       	rcall	.+2860   	; 0xd0a <lcd_clrscr>
		lcd_gotoxy(1,10); 
     1de:	81 e0       	ldi	r24, 0x01	; 1
     1e0:	6a e0       	ldi	r22, 0x0A	; 10
     1e2:	80 d5       	rcall	.+2816   	; 0xce4 <lcd_gotoxy>
		lcd_puts("Stop charging"); 
     1e4:	80 e9       	ldi	r24, 0x90	; 144
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	db d5       	rcall	.+2998   	; 0xda0 <lcd_puts>
     1ea:	20 ed       	ldi	r18, 0xD0	; 208
     1ec:	37 e0       	ldi	r19, 0x07	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1ee:	48 ec       	ldi	r20, 0xC8	; 200
     1f0:	50 e0       	ldi	r21, 0x00	; 0
     1f2:	ca 01       	movw	r24, r20
     1f4:	01 97       	sbiw	r24, 0x01	; 1
     1f6:	f1 f7       	brne	.-4      	; 0x1f4 <charge_ok_btn+0x20>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1f8:	21 50       	subi	r18, 0x01	; 1
     1fa:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1fc:	d1 f7       	brne	.-12     	; 0x1f2 <charge_ok_btn+0x1e>
		_delay_ms(200);
		lcd_clrscr();
     1fe:	85 d5       	rcall	.+2826   	; 0xd0a <lcd_clrscr>
		charge_mode = CHARGING_ABORT;
     200:	82 e0       	ldi	r24, 0x02	; 2
     202:	80 93 d4 01 	sts	0x01D4, r24
     206:	80 e0       	ldi	r24, 0x00	; 0
		return false;
	}
}
     208:	08 95       	ret
	print_voltage_current();
};

bool charge_ok_btn(void){
	if (charge_mode == CHARGING_DONE){
		mode = 0;
     20a:	10 92 d0 01 	sts	0x01D0, r1


bool restart (void){
	//reset

	asm("ldi r30,0"); asm("ldi r31,0"); asm("ijmp");
     20e:	e0 e0       	ldi	r30, 0x00	; 0
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	09 94       	ijmp
     214:	08 95       	ret

00000216 <wait_start_ok>:
	lcd_gotoxy(0,0); 
	lcd_puts("Press OK to restart"); 
};


bool wait_start_ok(void){
     216:	0f 93       	push	r16
     218:	1f 93       	push	r17
	//TODO: autodetect battery
	//
	lcd_clrscr();
     21a:	77 d5       	rcall	.+2798   	; 0xd0a <lcd_clrscr>
    lcd_gotoxy(0,0); 
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	60 e0       	ldi	r22, 0x00	; 0
     220:	61 d5       	rcall	.+2754   	; 0xce4 <lcd_gotoxy>
    if (settings.batt_type == 0) {
     222:	20 91 ae 01 	lds	r18, 0x01AE
     226:	22 23       	and	r18, r18
     228:	69 f4       	brne	.+26     	; 0x244 <wait_start_ok+0x2e>
		lcd_puts("Try to detect battery .. ");	
     22a:	8e e9       	ldi	r24, 0x9E	; 158
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	b8 d5       	rcall	.+2928   	; 0xda0 <lcd_puts>
		
		if (adc_val_arr[1].value < MIN_ADVAL_CHARGE_CURRENT){
     230:	80 91 9d 01 	lds	r24, 0x019D
     234:	90 91 9e 01 	lds	r25, 0x019E
     238:	0f 97       	sbiw	r24, 0x0f	; 15
     23a:	58 f1       	brcs	.+86     	; 0x292 <wait_start_ok+0x7c>
			lcd_puts("Battery not detected");	
			return false;
		}
		settings.batt_type  = 5;
     23c:	85 e0       	ldi	r24, 0x05	; 5
     23e:	80 93 ae 01 	sts	0x01AE, r24
     242:	25 e0       	ldi	r18, 0x05	; 5
	}
	target_voltage = settings.target_cell_voltage*settings.batt_type;
     244:	30 e0       	ldi	r19, 0x00	; 0
     246:	80 91 b1 01 	lds	r24, 0x01B1
     24a:	90 91 b2 01 	lds	r25, 0x01B2
     24e:	28 9f       	mul	r18, r24
     250:	b0 01       	movw	r22, r0
     252:	29 9f       	mul	r18, r25
     254:	70 0d       	add	r23, r0
     256:	38 9f       	mul	r19, r24
     258:	70 0d       	add	r23, r0
     25a:	11 24       	eor	r1, r1
     25c:	70 93 d6 01 	sts	0x01D6, r23
     260:	60 93 d5 01 	sts	0x01D5, r22
	
	convert_print_value_mult_1000(0,1,target_voltage*AD_RESOLUTION_VOLTAGEINPUT, target_voltage_str); //keep it as string for display
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	8a d7       	rcall	.+3860   	; 0x117e <__floatunsisf>
     26a:	2e ea       	ldi	r18, 0xAE	; 174
     26c:	37 e4       	ldi	r19, 0x47	; 71
     26e:	43 ec       	ldi	r20, 0xC3	; 195
     270:	51 e4       	ldi	r21, 0x41	; 65
     272:	3b d8       	rcall	.-3978   	; 0xfffff2ea <__eeprom_end+0xff7ef2e1>
     274:	9b 01       	movw	r18, r22
     276:	ac 01       	movw	r20, r24
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	61 e0       	ldi	r22, 0x01	; 1
     27c:	08 ed       	ldi	r16, 0xD8	; 216
     27e:	11 e0       	ldi	r17, 0x01	; 1
     280:	99 d6       	rcall	.+3378   	; 0xfb4 <convert_print_value_mult_1000>
	charge_mode = CHARGING_ACTIVE;
     282:	10 92 d4 01 	sts	0x01D4, r1
	mode_pressed = 1; //jump to charging mode
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	80 93 ad 01 	sts	0x01AD, r24
	return true;
}
     28c:	1f 91       	pop	r17
     28e:	0f 91       	pop	r16
     290:	08 95       	ret
    lcd_gotoxy(0,0); 
    if (settings.batt_type == 0) {
		lcd_puts("Try to detect battery .. ");	
		
		if (adc_val_arr[1].value < MIN_ADVAL_CHARGE_CURRENT){
			lcd_puts("Battery not detected");	
     292:	88 eb       	ldi	r24, 0xB8	; 184
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	84 d5       	rcall	.+2824   	; 0xda0 <lcd_puts>
     298:	80 e0       	ldi	r24, 0x00	; 0
	
	convert_print_value_mult_1000(0,1,target_voltage*AD_RESOLUTION_VOLTAGEINPUT, target_voltage_str); //keep it as string for display
	charge_mode = CHARGING_ACTIVE;
	mode_pressed = 1; //jump to charging mode
	return true;
}
     29a:	1f 91       	pop	r17
     29c:	0f 91       	pop	r16
     29e:	08 95       	ret

000002a0 <f_set_target_voltage>:
	cheapitoa(settings.target_charging_current, buff);
	lcd_gotoxy(2,1); 
	lcd_puts(buff);
};

void f_set_target_voltage (void){
     2a0:	df 92       	push	r13
     2a2:	ef 92       	push	r14
     2a4:	ff 92       	push	r15
     2a6:	0f 93       	push	r16
     2a8:	1f 93       	push	r17
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
	
	//convert_print_value_mult_1000(10,0, MIN_ADVAL_CELL_VOLTAGE*AD_RESOLUTION_VOLTAGEINPUT);
	//convert_print_value_mult_1000(16,0, MAX_ADVAL_CELL_VOLTAGE*AD_RESOLUTION_VOLTAGEINPUT);
	if (encoder > 0) {
     2ae:	d0 90 cb 01 	lds	r13, 0x01CB
     2b2:	1d 14       	cp	r1, r13
     2b4:	0c f0       	brlt	.+2      	; 0x2b8 <f_set_target_voltage+0x18>
     2b6:	4c c0       	rjmp	.+152    	; 0x350 <f_set_target_voltage+0xb0>
		if (settings.target_cell_voltage < MAX_ADVAL_CELL_VOLTAGE) settings.target_cell_voltage++;
     2b8:	c0 91 b1 01 	lds	r28, 0x01B1
     2bc:	d0 91 b2 01 	lds	r29, 0x01B2
     2c0:	be 01       	movw	r22, r28
     2c2:	80 e0       	ldi	r24, 0x00	; 0
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	5b d7       	rcall	.+3766   	; 0x117e <__floatunsisf>
     2c8:	7b 01       	movw	r14, r22
     2ca:	8c 01       	movw	r16, r24
     2cc:	26 e0       	ldi	r18, 0x06	; 6
     2ce:	31 e4       	ldi	r19, 0x41	; 65
     2d0:	44 e3       	ldi	r20, 0x34	; 52
     2d2:	53 e4       	ldi	r21, 0x43	; 67
     2d4:	1f d7       	rcall	.+3646   	; 0x1114 <__cmpsf2>
     2d6:	88 23       	and	r24, r24
     2d8:	c4 f0       	brlt	.+48     	; 0x30a <f_set_target_voltage+0x6a>
	};
	if (encoder < 0) {
     2da:	d7 fc       	sbrc	r13, 7
     2dc:	23 c0       	rjmp	.+70     	; 0x324 <f_set_target_voltage+0x84>
		if (settings.target_cell_voltage > MIN_ADVAL_CELL_VOLTAGE) settings.target_cell_voltage--;
	}
	convert_print_value_mult_1000(2,1, settings.target_cell_voltage*AD_RESOLUTION_VOLTAGEINPUT, buff);
     2de:	c8 01       	movw	r24, r16
     2e0:	b7 01       	movw	r22, r14
     2e2:	2e ea       	ldi	r18, 0xAE	; 174
     2e4:	37 e4       	ldi	r19, 0x47	; 71
     2e6:	43 ec       	ldi	r20, 0xC3	; 195
     2e8:	51 e4       	ldi	r21, 0x41	; 65
     2ea:	ff d7       	rcall	.+4094   	; 0x12ea <__mulsf3>
     2ec:	9b 01       	movw	r18, r22
     2ee:	ac 01       	movw	r20, r24
     2f0:	82 e0       	ldi	r24, 0x02	; 2
     2f2:	61 e0       	ldi	r22, 0x01	; 1
     2f4:	07 eb       	ldi	r16, 0xB7	; 183
     2f6:	11 e0       	ldi	r17, 0x01	; 1
     2f8:	5d d6       	rcall	.+3258   	; 0xfb4 <convert_print_value_mult_1000>
	//cheapitoa(settings.target_cell_voltage, buff);
	//lcd_gotoxy(2,1); 
	//lcd_puts(buff);
};
     2fa:	df 91       	pop	r29
     2fc:	cf 91       	pop	r28
     2fe:	1f 91       	pop	r17
     300:	0f 91       	pop	r16
     302:	ff 90       	pop	r15
     304:	ef 90       	pop	r14
     306:	df 90       	pop	r13
     308:	08 95       	ret
void f_set_target_voltage (void){
	
	//convert_print_value_mult_1000(10,0, MIN_ADVAL_CELL_VOLTAGE*AD_RESOLUTION_VOLTAGEINPUT);
	//convert_print_value_mult_1000(16,0, MAX_ADVAL_CELL_VOLTAGE*AD_RESOLUTION_VOLTAGEINPUT);
	if (encoder > 0) {
		if (settings.target_cell_voltage < MAX_ADVAL_CELL_VOLTAGE) settings.target_cell_voltage++;
     30a:	21 96       	adiw	r28, 0x01	; 1
     30c:	d0 93 b2 01 	sts	0x01B2, r29
     310:	c0 93 b1 01 	sts	0x01B1, r28
     314:	be 01       	movw	r22, r28
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	31 d7       	rcall	.+3682   	; 0x117e <__floatunsisf>
     31c:	7b 01       	movw	r14, r22
     31e:	8c 01       	movw	r16, r24
	};
	if (encoder < 0) {
     320:	d7 fe       	sbrs	r13, 7
     322:	dd cf       	rjmp	.-70     	; 0x2de <f_set_target_voltage+0x3e>
		if (settings.target_cell_voltage > MIN_ADVAL_CELL_VOLTAGE) settings.target_cell_voltage--;
     324:	c8 01       	movw	r24, r16
     326:	b7 01       	movw	r22, r14
     328:	25 e8       	ldi	r18, 0x85	; 133
     32a:	3c ea       	ldi	r19, 0xAC	; 172
     32c:	4b e1       	ldi	r20, 0x1B	; 27
     32e:	53 e4       	ldi	r21, 0x43	; 67
     330:	d8 d7       	rcall	.+4016   	; 0x12e2 <__gesf2>
     332:	18 16       	cp	r1, r24
     334:	a4 f6       	brge	.-88     	; 0x2de <f_set_target_voltage+0x3e>
     336:	be 01       	movw	r22, r28
     338:	61 50       	subi	r22, 0x01	; 1
     33a:	70 40       	sbci	r23, 0x00	; 0
     33c:	70 93 b2 01 	sts	0x01B2, r23
     340:	60 93 b1 01 	sts	0x01B1, r22
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	1a d7       	rcall	.+3636   	; 0x117e <__floatunsisf>
     34a:	7b 01       	movw	r14, r22
     34c:	8c 01       	movw	r16, r24
     34e:	c7 cf       	rjmp	.-114    	; 0x2de <f_set_target_voltage+0x3e>

void f_set_target_voltage (void){
	
	//convert_print_value_mult_1000(10,0, MIN_ADVAL_CELL_VOLTAGE*AD_RESOLUTION_VOLTAGEINPUT);
	//convert_print_value_mult_1000(16,0, MAX_ADVAL_CELL_VOLTAGE*AD_RESOLUTION_VOLTAGEINPUT);
	if (encoder > 0) {
     350:	c0 91 b1 01 	lds	r28, 0x01B1
     354:	d0 91 b2 01 	lds	r29, 0x01B2
     358:	be 01       	movw	r22, r28
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	0f d7       	rcall	.+3614   	; 0x117e <__floatunsisf>
     360:	7b 01       	movw	r14, r22
     362:	8c 01       	movw	r16, r24
     364:	ba cf       	rjmp	.-140    	; 0x2da <f_set_target_voltage+0x3a>

00000366 <print_voltage_current>:
	}
*/
}


void print_voltage_current(void){
     366:	af 92       	push	r10
     368:	bf 92       	push	r11
     36a:	cf 92       	push	r12
     36c:	df 92       	push	r13
     36e:	ef 92       	push	r14
     370:	ff 92       	push	r15
     372:	0f 93       	push	r16
     374:	1f 93       	push	r17
	float voltage_value = adc_val_arr[0].value*AD_RESOLUTION_VOLTAGEINPUT ;
     376:	60 91 97 01 	lds	r22, 0x0197
     37a:	70 91 98 01 	lds	r23, 0x0198
	float current_value = adc_val_arr[1].value*AD_RESOLUTION_CURRENTINPUT ; 
     37e:	c0 90 9d 01 	lds	r12, 0x019D
     382:	d0 90 9e 01 	lds	r13, 0x019E
	convert_print_value_mult_1000(15,0,voltage_value, buff);
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	f9 d6       	rcall	.+3570   	; 0x117e <__floatunsisf>
     38c:	2e ea       	ldi	r18, 0xAE	; 174
     38e:	37 e4       	ldi	r19, 0x47	; 71
     390:	43 ec       	ldi	r20, 0xC3	; 195
     392:	51 e4       	ldi	r21, 0x41	; 65
     394:	aa d7       	rcall	.+3924   	; 0x12ea <__mulsf3>
     396:	9b 01       	movw	r18, r22
     398:	ac 01       	movw	r20, r24
     39a:	97 eb       	ldi	r25, 0xB7	; 183
     39c:	a9 2e       	mov	r10, r25
     39e:	91 e0       	ldi	r25, 0x01	; 1
     3a0:	b9 2e       	mov	r11, r25
     3a2:	8f e0       	ldi	r24, 0x0F	; 15
     3a4:	60 e0       	ldi	r22, 0x00	; 0
     3a6:	85 01       	movw	r16, r10
     3a8:	05 d6       	rcall	.+3082   	; 0xfb4 <convert_print_value_mult_1000>
	convert_print_value_mult_1000(15,1,current_value, buff);
     3aa:	ee 24       	eor	r14, r14
     3ac:	ff 24       	eor	r15, r15
     3ae:	c7 01       	movw	r24, r14
     3b0:	b6 01       	movw	r22, r12
     3b2:	e5 d6       	rcall	.+3530   	; 0x117e <__floatunsisf>
     3b4:	28 e5       	ldi	r18, 0x58	; 88
     3b6:	39 e3       	ldi	r19, 0x39	; 57
     3b8:	4c e1       	ldi	r20, 0x1C	; 28
     3ba:	50 e4       	ldi	r21, 0x40	; 64
     3bc:	96 d7       	rcall	.+3884   	; 0x12ea <__mulsf3>
     3be:	20 e0       	ldi	r18, 0x00	; 0
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	40 e0       	ldi	r20, 0x00	; 0
     3c4:	5f e3       	ldi	r21, 0x3F	; 63
     3c6:	91 d7       	rcall	.+3874   	; 0x12ea <__mulsf3>
     3c8:	9b 01       	movw	r18, r22
     3ca:	ac 01       	movw	r20, r24
     3cc:	8f e0       	ldi	r24, 0x0F	; 15
     3ce:	61 e0       	ldi	r22, 0x01	; 1
     3d0:	f1 d5       	rcall	.+3042   	; 0xfb4 <convert_print_value_mult_1000>
	lcd_gotoxy(20,0); 
     3d2:	84 e1       	ldi	r24, 0x14	; 20
     3d4:	60 e0       	ldi	r22, 0x00	; 0
     3d6:	86 d4       	rcall	.+2316   	; 0xce4 <lcd_gotoxy>
	lcd_puts(" V");
     3d8:	8d ec       	ldi	r24, 0xCD	; 205
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	e1 d4       	rcall	.+2498   	; 0xda0 <lcd_puts>
	lcd_gotoxy(20,1); 
     3de:	84 e1       	ldi	r24, 0x14	; 20
     3e0:	61 e0       	ldi	r22, 0x01	; 1
     3e2:	80 d4       	rcall	.+2304   	; 0xce4 <lcd_gotoxy>
	lcd_puts(" mA");
     3e4:	80 ed       	ldi	r24, 0xD0	; 208
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	db d4       	rcall	.+2486   	; 0xda0 <lcd_puts>
}
     3ea:	1f 91       	pop	r17
     3ec:	0f 91       	pop	r16
     3ee:	ff 90       	pop	r15
     3f0:	ef 90       	pop	r14
     3f2:	df 90       	pop	r13
     3f4:	cf 90       	pop	r12
     3f6:	bf 90       	pop	r11
     3f8:	af 90       	pop	r10
     3fa:	08 95       	ret

000003fc <f_charge>:

uint8_t charge_mode ;
uint16_t target_voltage;
uint16_t min_batt_voltage;

void f_charge (void){
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
	lcd_gotoxy(7,0); 
     400:	87 e0       	ldi	r24, 0x07	; 7
     402:	60 e0       	ldi	r22, 0x00	; 0
     404:	6f d4       	rcall	.+2270   	; 0xce4 <lcd_gotoxy>
	lcd_puts(batMenuItems[settings.batt_type]);
     406:	e0 91 ae 01 	lds	r30, 0x01AE
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	ee 0f       	add	r30, r30
     40e:	ff 1f       	adc	r31, r31
     410:	e0 5c       	subi	r30, 0xC0	; 192
     412:	fe 4f       	sbci	r31, 0xFE	; 254
     414:	80 81       	ld	r24, Z
     416:	91 81       	ldd	r25, Z+1	; 0x01
     418:	c3 d4       	rcall	.+2438   	; 0xda0 <lcd_puts>
	
	lcd_gotoxy(0,1); 
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	61 e0       	ldi	r22, 0x01	; 1
     41e:	62 d4       	rcall	.+2244   	; 0xce4 <lcd_gotoxy>
	uint16_t batt_voltage = adc_val_arr[0].value;
     420:	40 91 97 01 	lds	r20, 0x0197
     424:	50 91 98 01 	lds	r21, 0x0198
	uint16_t charge_current = adc_val_arr[1].value;
     428:	60 91 9d 01 	lds	r22, 0x019D
     42c:	70 91 9e 01 	lds	r23, 0x019E
	
	if (charge_mode == CHARGING_ABORT){
     430:	20 91 d4 01 	lds	r18, 0x01D4
     434:	22 30       	cpi	r18, 0x02	; 2
     436:	81 f1       	breq	.+96     	; 0x498 <__stack+0x39>
		SWITCH_CHARGING_OFF;
		lcd_puts("CHARGING ABORTED"); 	
		return;
	}
	if (charge_mode == CHARGING_DONE) {
     438:	21 30       	cpi	r18, 0x01	; 1
     43a:	a9 f1       	breq	.+106    	; 0x4a6 <__stack+0x47>
		SWITCH_CHARGING_OFF;
		lcd_puts("CHARGING FINISHED"); 
		return;
	}else{
		SWITCH_CHARGING_ON;
     43c:	c3 9a       	sbi	0x18, 3	; 24
	}
	
	if (batt_voltage >=  target_voltage && charge_current < FINAL_CHARGE_CURRENT){
     43e:	c0 91 d5 01 	lds	r28, 0x01D5
     442:	d0 91 d6 01 	lds	r29, 0x01D6
     446:	4c 17       	cp	r20, r28
     448:	5d 07       	cpc	r21, r29
     44a:	70 f0       	brcs	.+28     	; 0x468 <__stack+0x9>
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	96 d6       	rcall	.+3372   	; 0x117e <__floatunsisf>
     452:	2a e9       	ldi	r18, 0x9A	; 154
     454:	39 e1       	ldi	r19, 0x19	; 25
     456:	44 ef       	ldi	r20, 0xF4	; 244
     458:	52 e4       	ldi	r21, 0x42	; 66
     45a:	5c d6       	rcall	.+3256   	; 0x1114 <__cmpsf2>
     45c:	88 23       	and	r24, r24
     45e:	24 f4       	brge	.+8      	; 0x468 <__stack+0x9>
		//disconnect charging
		SWITCH_CHARGING_OFF;
     460:	c3 98       	cbi	0x18, 3	; 24
		charge_mode = CHARGING_DONE;
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	80 93 d4 01 	sts	0x01D4, r24
	}
	if (adc_val_arr[0].value < target_voltage) {
     468:	80 91 97 01 	lds	r24, 0x0197
     46c:	90 91 98 01 	lds	r25, 0x0198
     470:	8c 17       	cp	r24, r28
     472:	9d 07       	cpc	r25, r29
     474:	50 f4       	brcc	.+20     	; 0x48a <__stack+0x2b>
		//keep loading in constant voltage mode
		//show mode on display
		lcd_puts("CC to "); 
     476:	87 ef       	ldi	r24, 0xF7	; 247
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	92 d4       	rcall	.+2340   	; 0xda0 <lcd_puts>
        lcd_puts(target_voltage_str);
     47c:	88 ed       	ldi	r24, 0xD8	; 216
     47e:	91 e0       	ldi	r25, 0x01	; 1
     480:	8f d4       	rcall	.+2334   	; 0xda0 <lcd_puts>
		lcd_puts("final CV "); 
		//start reducing the charging current
		charge_mode = CHARGING_DONE;
		;
	}
	print_voltage_current();
     482:	71 df       	rcall	.-286    	; 0x366 <print_voltage_current>
};
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	08 95       	ret
		//keep loading in constant voltage mode
		//show mode on display
		lcd_puts("CC to "); 
        lcd_puts(target_voltage_str);
	}else{			
		lcd_puts("final CV "); 
     48a:	8e ef       	ldi	r24, 0xFE	; 254
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	88 d4       	rcall	.+2320   	; 0xda0 <lcd_puts>
		//start reducing the charging current
		charge_mode = CHARGING_DONE;
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	80 93 d4 01 	sts	0x01D4, r24
     496:	f5 cf       	rjmp	.-22     	; 0x482 <__stack+0x23>
	lcd_gotoxy(0,1); 
	uint16_t batt_voltage = adc_val_arr[0].value;
	uint16_t charge_current = adc_val_arr[1].value;
	
	if (charge_mode == CHARGING_ABORT){
		SWITCH_CHARGING_OFF;
     498:	c3 98       	cbi	0x18, 3	; 24
		lcd_puts("CHARGING ABORTED"); 	
     49a:	84 ed       	ldi	r24, 0xD4	; 212
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	80 d4       	rcall	.+2304   	; 0xda0 <lcd_puts>
		//start reducing the charging current
		charge_mode = CHARGING_DONE;
		;
	}
	print_voltage_current();
};
     4a0:	df 91       	pop	r29
     4a2:	cf 91       	pop	r28
     4a4:	08 95       	ret
		SWITCH_CHARGING_OFF;
		lcd_puts("CHARGING ABORTED"); 	
		return;
	}
	if (charge_mode == CHARGING_DONE) {
		SWITCH_CHARGING_OFF;
     4a6:	c3 98       	cbi	0x18, 3	; 24
		lcd_puts("CHARGING FINISHED"); 
     4a8:	85 ee       	ldi	r24, 0xE5	; 229
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	79 d4       	rcall	.+2290   	; 0xda0 <lcd_puts>
		//start reducing the charging current
		charge_mode = CHARGING_DONE;
		;
	}
	print_voltage_current();
};
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	08 95       	ret

000004b4 <f_discharge>:
	}
}

float capacity;

void f_discharge (void){
     4b4:	0f 93       	push	r16
     4b6:	1f 93       	push	r17
	uint16_t batt_voltage = adc_val_arr[0].value;
     4b8:	20 91 97 01 	lds	r18, 0x0197
     4bc:	30 91 98 01 	lds	r19, 0x0198
	uint16_t discharge_current = adc_val_arr[1].value;
     4c0:	80 91 9d 01 	lds	r24, 0x019D
     4c4:	90 91 9e 01 	lds	r25, 0x019E
	capacity += batt_voltage*discharge_current;
     4c8:	82 9f       	mul	r24, r18
     4ca:	b0 01       	movw	r22, r0
     4cc:	83 9f       	mul	r24, r19
     4ce:	70 0d       	add	r23, r0
     4d0:	92 9f       	mul	r25, r18
     4d2:	70 0d       	add	r23, r0
     4d4:	11 24       	eor	r1, r1
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	51 d6       	rcall	.+3234   	; 0x117e <__floatunsisf>
     4dc:	9b 01       	movw	r18, r22
     4de:	ac 01       	movw	r20, r24
     4e0:	60 91 cc 01 	lds	r22, 0x01CC
     4e4:	70 91 cd 01 	lds	r23, 0x01CD
     4e8:	80 91 ce 01 	lds	r24, 0x01CE
     4ec:	90 91 cf 01 	lds	r25, 0x01CF
     4f0:	ad d5       	rcall	.+2906   	; 0x104c <__addsf3>
     4f2:	60 93 cc 01 	sts	0x01CC, r22
     4f6:	70 93 cd 01 	sts	0x01CD, r23
     4fa:	80 93 ce 01 	sts	0x01CE, r24
     4fe:	90 93 cf 01 	sts	0x01CF, r25
	lcd_gotoxy(0,1);
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	61 e0       	ldi	r22, 0x01	; 1
     506:	ee d3       	rcall	.+2012   	; 0xce4 <lcd_gotoxy>
	convert_print_value_mult_1000(0,1,capacity, buff);
     508:	20 91 cc 01 	lds	r18, 0x01CC
     50c:	30 91 cd 01 	lds	r19, 0x01CD
     510:	40 91 ce 01 	lds	r20, 0x01CE
     514:	50 91 cf 01 	lds	r21, 0x01CF
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	61 e0       	ldi	r22, 0x01	; 1
     51c:	07 eb       	ldi	r16, 0xB7	; 183
     51e:	11 e0       	ldi	r17, 0x01	; 1
     520:	49 d5       	rcall	.+2706   	; 0xfb4 <convert_print_value_mult_1000>
		SWITCH_DISCHARGING_OFF;
		lcd_gotoxy(10,0);
		lcd_puts("Done! "); 
		return;
	}else{
		SWITCH_DISCHARGING_ON;
     522:	c5 9a       	sbi	0x18, 5	; 24
	}
	
	print_voltage_current();
     524:	20 df       	rcall	.-448    	; 0x366 <print_voltage_current>
	
};
     526:	1f 91       	pop	r17
     528:	0f 91       	pop	r16
     52a:	08 95       	ret

0000052c <f_set_curr>:

#define CURRENT_STEP 20

void f_set_curr		(void){
	
	if (encoder > 0) {
     52c:	80 91 cb 01 	lds	r24, 0x01CB
     530:	18 16       	cp	r1, r24
     532:	f4 f4       	brge	.+60     	; 0x570 <f_set_curr+0x44>
		if (settings.target_charging_current < MAX_ADVAL_CHARGE_CURRENT-CURRENT_STEP) settings.target_charging_current+=CURRENT_STEP;
     534:	80 91 af 01 	lds	r24, 0x01AF
     538:	90 91 b0 01 	lds	r25, 0x01B0
     53c:	23 e0       	ldi	r18, 0x03	; 3
     53e:	8b 3e       	cpi	r24, 0xEB	; 235
     540:	92 07       	cpc	r25, r18
     542:	80 f0       	brcs	.+32     	; 0x564 <f_set_curr+0x38>
	OCR1A = settings.target_charging_current; //set pwm
	//convert_print_value_mult_1000(2,1, ((float) settings.target_charging_current)*AD_RESOLUTION_CURRENTINPUT);
	cheapitoa(settings.target_charging_current, buff);
	lcd_gotoxy(2,1); 
	lcd_puts(buff);
};
     544:	80 91 af 01 	lds	r24, 0x01AF
     548:	90 91 b0 01 	lds	r25, 0x01B0
		if (settings.target_charging_current < MAX_ADVAL_CHARGE_CURRENT-CURRENT_STEP) settings.target_charging_current+=CURRENT_STEP;
	};
	if (encoder < 0) {
		if (settings.target_charging_current > CURRENT_STEP) settings.target_charging_current-=CURRENT_STEP;
	}
	OCR1A = settings.target_charging_current; //set pwm
     54c:	9b bd       	out	0x2b, r25	; 43
     54e:	8a bd       	out	0x2a, r24	; 42
	//convert_print_value_mult_1000(2,1, ((float) settings.target_charging_current)*AD_RESOLUTION_CURRENTINPUT);
	cheapitoa(settings.target_charging_current, buff);
     550:	67 eb       	ldi	r22, 0xB7	; 183
     552:	71 e0       	ldi	r23, 0x01	; 1
     554:	7e d4       	rcall	.+2300   	; 0xe52 <cheapitoa>
	lcd_gotoxy(2,1); 
     556:	82 e0       	ldi	r24, 0x02	; 2
     558:	61 e0       	ldi	r22, 0x01	; 1
     55a:	c4 d3       	rcall	.+1928   	; 0xce4 <lcd_gotoxy>
	lcd_puts(buff);
     55c:	87 eb       	ldi	r24, 0xB7	; 183
     55e:	91 e0       	ldi	r25, 0x01	; 1
     560:	1f d4       	rcall	.+2110   	; 0xda0 <lcd_puts>
};
     562:	08 95       	ret
#define CURRENT_STEP 20

void f_set_curr		(void){
	
	if (encoder > 0) {
		if (settings.target_charging_current < MAX_ADVAL_CHARGE_CURRENT-CURRENT_STEP) settings.target_charging_current+=CURRENT_STEP;
     564:	44 96       	adiw	r24, 0x14	; 20
     566:	90 93 b0 01 	sts	0x01B0, r25
     56a:	80 93 af 01 	sts	0x01AF, r24
     56e:	ea cf       	rjmp	.-44     	; 0x544 <f_set_curr+0x18>
	};
	if (encoder < 0) {
     570:	88 23       	and	r24, r24
     572:	41 f3       	breq	.-48     	; 0x544 <f_set_curr+0x18>
		if (settings.target_charging_current > CURRENT_STEP) settings.target_charging_current-=CURRENT_STEP;
     574:	80 91 af 01 	lds	r24, 0x01AF
     578:	90 91 b0 01 	lds	r25, 0x01B0
     57c:	85 31       	cpi	r24, 0x15	; 21
     57e:	91 05       	cpc	r25, r1
     580:	28 f3       	brcs	.-54     	; 0x54c <f_set_curr+0x20>
     582:	44 97       	sbiw	r24, 0x14	; 20
     584:	90 93 b0 01 	sts	0x01B0, r25
     588:	80 93 af 01 	sts	0x01AF, r24
     58c:	df cf       	rjmp	.-66     	; 0x54c <f_set_curr+0x20>

0000058e <read_settings>:
	restart();
	return true; // will never reach here
}

void read_settings(void){
    eeprom_busy_wait();
     58e:	e1 99       	sbic	0x1c, 1	; 28
     590:	fe cf       	rjmp	.-4      	; 0x58e <read_settings>
    eeprom_read_block ((void*)&settings, &ee_settings, sizeof(settings));
     592:	8e ea       	ldi	r24, 0xAE	; 174
     594:	91 e0       	ldi	r25, 0x01	; 1
     596:	60 e0       	ldi	r22, 0x00	; 0
     598:	70 e0       	ldi	r23, 0x00	; 0
     59a:	49 e0       	ldi	r20, 0x09	; 9
     59c:	50 e0       	ldi	r21, 0x00	; 0
     59e:	a7 d7       	rcall	.+3918   	; 0x14ee <__eerd_block_m8>
		char* memaddr = &settings;
		lcd_putc( (*(memaddr + i) >> 4) + 0x30);
		lcd_putc( (*(memaddr + i) & 0x0F) + 0x30);
	}
*/
}
     5a0:	08 95       	ret

000005a2 <main>:
  
 
}
 
int main(void)
{	
     5a2:	cf 92       	push	r12
     5a4:	df 92       	push	r13
     5a6:	ef 92       	push	r14
     5a8:	ff 92       	push	r15
     5aa:	0f 93       	push	r16
     5ac:	1f 93       	push	r17
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
	//usart_init(BAUDRATE); // setup the UART

    /* initialize display, cursor off */
    
	//set inputs
	PORTC |= (1 << MODE_BUTTON) ; // PULLUP für inputs
     5b2:	ad 9a       	sbi	0x15, 5	; 21
    DDRC &=~ 1 << MODE_BUTTON ; // Activate input
     5b4:	84 b3       	in	r24, 0x14	; 20
     5b6:	80 7c       	andi	r24, 0xC0	; 192
     5b8:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1 << OK_BUTTON) ; // PULLUP für inputs
     5ba:	ac 9a       	sbi	0x15, 4	; 21
    DDRC &=~ 1 << OK_BUTTON ; // Activate input
     5bc:	84 b3       	in	r24, 0x14	; 20
     5be:	80 7e       	andi	r24, 0xE0	; 224
     5c0:	84 bb       	out	0x14, r24	; 20
    
	PORTB |=  (1 << ROTARY_IN1) | (1 << ROTARY_IN2);
     5c2:	88 b3       	in	r24, 0x18	; 24
     5c4:	80 6c       	ori	r24, 0xC0	; 192
     5c6:	88 bb       	out	0x18, r24	; 24
	DDRB &=~ 1 << ROTARY_IN1 ;
     5c8:	87 b3       	in	r24, 0x17	; 23
     5ca:	80 78       	andi	r24, 0x80	; 128
     5cc:	87 bb       	out	0x17, r24	; 23
    DDRB &=~ 1 << ROTARY_IN2 ;    
     5ce:	87 b3       	in	r24, 0x17	; 23
     5d0:	17 ba       	out	0x17, r1	; 23
    
    //set OC1A as output
    DDRB |= (1 << PB1) ;
     5d2:	b9 9a       	sbi	0x17, 1	; 23
	
	//relaises
	DDRB |=  (1 << CHARGE_RELAIS_PIN) | (1 << DISCHARGE_RELAIS_PIN) ; 
     5d4:	87 b3       	in	r24, 0x17	; 23
     5d6:	88 62       	ori	r24, 0x28	; 40
     5d8:	87 bb       	out	0x17, r24	; 23
    
	lcd_init(LCD_DISP_ON);
     5da:	8c e0       	ldi	r24, 0x0C	; 12
     5dc:	01 d4       	rcall	.+2050   	; 0xde0 <lcd_init>
	lcd_clrscr();
     5de:	95 d3       	rcall	.+1834   	; 0xd0a <lcd_clrscr>
	lcd_gotoxy(0,1); 
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	61 e0       	ldi	r22, 0x01	; 1
     5e4:	7f d3       	rcall	.+1790   	; 0xce4 <lcd_gotoxy>
	
	
	timer_init();
     5e6:	9f dd       	rcall	.-1218   	; 0x126 <timer_init>
	
	adc_init();
     5e8:	94 d2       	rcall	.+1320   	; 0xb12 <adc_init>
	sei();
     5ea:	78 94       	sei
	//usart_write_str("INIT OK");
	SWITCH_CHARGING_OFF;
     5ec:	c3 98       	cbi	0x18, 3	; 24
	SWITCH_DISCHARGING_OFF;
     5ee:	c5 98       	cbi	0x18, 5	; 24
	//check value plausibility
	mode = 0;
     5f0:	10 92 d0 01 	sts	0x01D0, r1
	read_settings();
     5f4:	cc df       	rcall	.-104    	; 0x58e <read_settings>
	target_voltage = settings.target_cell_voltage*settings.batt_type;
     5f6:	0e ea       	ldi	r16, 0xAE	; 174
     5f8:	11 e0       	ldi	r17, 0x01	; 1
     5fa:	60 91 ae 01 	lds	r22, 0x01AE
     5fe:	70 e0       	ldi	r23, 0x00	; 0
     600:	20 91 b1 01 	lds	r18, 0x01B1
     604:	30 91 b2 01 	lds	r19, 0x01B2
     608:	c9 01       	movw	r24, r18
     60a:	68 9f       	mul	r22, r24
     60c:	90 01       	movw	r18, r0
     60e:	69 9f       	mul	r22, r25
     610:	30 0d       	add	r19, r0
     612:	78 9f       	mul	r23, r24
     614:	30 0d       	add	r19, r0
     616:	11 24       	eor	r1, r1
     618:	30 93 d6 01 	sts	0x01D6, r19
     61c:	20 93 d5 01 	sts	0x01D5, r18
	min_batt_voltage = MIN_CELL_VOLTAGE*AD_RESOLUTION_VOLTAGEINPUT*settings.batt_type;
     620:	88 27       	eor	r24, r24
     622:	77 fd       	sbrc	r23, 7
     624:	80 95       	com	r24
     626:	98 2f       	mov	r25, r24
     628:	ac d5       	rcall	.+2904   	; 0x1182 <__floatsisf>
     62a:	22 ec       	ldi	r18, 0xC2	; 194
     62c:	35 e7       	ldi	r19, 0x75	; 117
     62e:	42 e9       	ldi	r20, 0x92	; 146
     630:	52 e4       	ldi	r21, 0x42	; 66
     632:	5b d6       	rcall	.+3254   	; 0x12ea <__mulsf3>
     634:	78 d5       	rcall	.+2800   	; 0x1126 <__fixunssfsi>
     636:	70 93 d2 01 	sts	0x01D2, r23
     63a:	60 93 d1 01 	sts	0x01D1, r22
     63e:	c8 01       	movw	r24, r16
     640:	95 95       	asr	r25
     642:	87 95       	ror	r24
     644:	95 95       	asr	r25
     646:	87 95       	ror	r24
     648:	95 95       	asr	r25
     64a:	87 95       	ror	r24
     64c:	95 95       	asr	r25
     64e:	87 95       	ror	r24
     650:	90 e3       	ldi	r25, 0x30	; 48
     652:	c9 2e       	mov	r12, r25
     654:	c8 0e       	add	r12, r24
     656:	1f e0       	ldi	r17, 0x0F	; 15
     658:	d1 2e       	mov	r13, r17
     65a:	d0 22       	and	r13, r16
     65c:	90 e3       	ldi	r25, 0x30	; 48
     65e:	d9 0e       	add	r13, r25
     660:	b8 ec       	ldi	r27, 0xC8	; 200
     662:	eb 2e       	mov	r14, r27
     664:	f1 2c       	mov	r15, r1
	
	for (;;) { /* loop forever */
		if (mode_pressed) //mode button pressed
     666:	80 91 ad 01 	lds	r24, 0x01AD
     66a:	88 23       	and	r24, r24
     66c:	49 f0       	breq	.+18     	; 0x680 <main+0xde>
		{
			if (mode < NELEMS(MODES)-1){
     66e:	80 91 d0 01 	lds	r24, 0x01D0
     672:	82 30       	cpi	r24, 0x02	; 2
     674:	08 f4       	brcc	.+2      	; 0x678 <main+0xd6>
     676:	7a c0       	rjmp	.+244    	; 0x76c <main+0x1ca>
                mode+=1;
				lcd_clrscr();                
            }else{
				mode=0;
     678:	10 92 d0 01 	sts	0x01D0, r1
			}
			mode_pressed = 0;
     67c:	10 92 ad 01 	sts	0x01AD, r1
		}
		if (ok_pressed) //ok button pressed
     680:	80 91 d7 01 	lds	r24, 0x01D7
     684:	88 23       	and	r24, r24
     686:	b9 f0       	breq	.+46     	; 0x6b6 <main+0x114>
		{
			ok_pressed = 0;
     688:	10 92 d7 01 	sts	0x01D7, r1
			bool bDone = false;
			if (MODES[mode].finally != NULL){
     68c:	80 91 d0 01 	lds	r24, 0x01D0
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	fc 01       	movw	r30, r24
     694:	ee 0f       	add	r30, r30
     696:	ff 1f       	adc	r31, r31
     698:	e8 0f       	add	r30, r24
     69a:	f9 1f       	adc	r31, r25
     69c:	ee 0f       	add	r30, r30
     69e:	ff 1f       	adc	r31, r31
     6a0:	e2 58       	subi	r30, 0x82	; 130
     6a2:	fe 4f       	sbci	r31, 0xFE	; 254
     6a4:	04 80       	ldd	r0, Z+4	; 0x04
     6a6:	f5 81       	ldd	r31, Z+5	; 0x05
     6a8:	e0 2d       	mov	r30, r0
     6aa:	30 97       	sbiw	r30, 0x00	; 0
     6ac:	21 f0       	breq	.+8      	; 0x6b6 <main+0x114>
				bDone = MODES[mode].finally();
     6ae:	09 95       	icall
			}
			if (bDone == true){
     6b0:	81 30       	cpi	r24, 0x01	; 1
     6b2:	09 f4       	brne	.+2      	; 0x6b6 <main+0x114>
     6b4:	4f c0       	rjmp	.+158    	; 0x754 <main+0x1b2>
			
			
		}

		//call the mode handling func
		lcd_gotoxy(0,0); 
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	60 e0       	ldi	r22, 0x00	; 0
     6ba:	14 d3       	rcall	.+1576   	; 0xce4 <lcd_gotoxy>
		lcd_puts(MODES[mode].descr);
     6bc:	80 91 d0 01 	lds	r24, 0x01D0
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	fc 01       	movw	r30, r24
     6c4:	ee 0f       	add	r30, r30
     6c6:	ff 1f       	adc	r31, r31
     6c8:	e8 0f       	add	r30, r24
     6ca:	f9 1f       	adc	r31, r25
     6cc:	ee 0f       	add	r30, r30
     6ce:	ff 1f       	adc	r31, r31
     6d0:	e0 58       	subi	r30, 0x80	; 128
     6d2:	fe 4f       	sbci	r31, 0xFE	; 254
     6d4:	80 81       	ld	r24, Z
     6d6:	91 81       	ldd	r25, Z+1	; 0x01
     6d8:	63 d3       	rcall	.+1734   	; 0xda0 <lcd_puts>

void read_encoder( void )         // Encoder auslesen
{
  // atomarer Variablenzugriff  
  //cli();
  encoder = enc_delta;
     6da:	80 91 f4 01 	lds	r24, 0x01F4
     6de:	80 93 cb 01 	sts	0x01CB, r24
  enc_delta = 0;
     6e2:	10 92 f4 01 	sts	0x01F4, r1
		lcd_gotoxy(0,0); 
		lcd_puts(MODES[mode].descr);
		//read encoder
		read_encoder();  
		//call handling function
		MODES[mode].fp();
     6e6:	80 91 d0 01 	lds	r24, 0x01D0
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	fc 01       	movw	r30, r24
     6ee:	ee 0f       	add	r30, r30
     6f0:	ff 1f       	adc	r31, r31
     6f2:	e8 0f       	add	r30, r24
     6f4:	f9 1f       	adc	r31, r25
     6f6:	ee 0f       	add	r30, r30
     6f8:	ff 1f       	adc	r31, r31
     6fa:	e2 58       	subi	r30, 0x82	; 130
     6fc:	fe 4f       	sbci	r31, 0xFE	; 254
     6fe:	01 90       	ld	r0, Z+
     700:	f0 81       	ld	r31, Z
     702:	e0 2d       	mov	r30, r0
     704:	09 95       	icall
        
		lcd_gotoxy(0,1); 
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	61 e0       	ldi	r22, 0x01	; 1
     70a:	ec d2       	rcall	.+1496   	; 0xce4 <lcd_gotoxy>
		char* memaddr = &settings;
		lcd_putc( (((int) memaddr)>>4) + 0x30 );
     70c:	8c 2d       	mov	r24, r12
     70e:	28 d3       	rcall	.+1616   	; 0xd60 <lcd_putc>
		lcd_putc( (((int) memaddr)&0x0F) + 0x30 );
     710:	8d 2d       	mov	r24, r13
     712:	26 d3       	rcall	.+1612   	; 0xd60 <lcd_putc>
     714:	c0 e0       	ldi	r28, 0x00	; 0
     716:	d0 e0       	ldi	r29, 0x00	; 0
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	90 e0       	ldi	r25, 0x00	; 0
		for (int i = 0; i < sizeof(settings); i++){
		
			
			lcd_putc( (*(memaddr + i) >> 4) + 0x30);
     71c:	8c 01       	movw	r16, r24
     71e:	02 55       	subi	r16, 0x52	; 82
     720:	1e 4f       	sbci	r17, 0xFE	; 254
     722:	f8 01       	movw	r30, r16
     724:	80 81       	ld	r24, Z
     726:	82 95       	swap	r24
     728:	8f 70       	andi	r24, 0x0F	; 15
     72a:	80 5d       	subi	r24, 0xD0	; 208
     72c:	19 d3       	rcall	.+1586   	; 0xd60 <lcd_putc>
			lcd_putc( (*(memaddr + i) & 0x0F) + 0x30);
     72e:	f8 01       	movw	r30, r16
     730:	80 81       	ld	r24, Z
     732:	8f 70       	andi	r24, 0x0F	; 15
     734:	80 5d       	subi	r24, 0xD0	; 208
     736:	14 d3       	rcall	.+1576   	; 0xd60 <lcd_putc>
        
		lcd_gotoxy(0,1); 
		char* memaddr = &settings;
		lcd_putc( (((int) memaddr)>>4) + 0x30 );
		lcd_putc( (((int) memaddr)&0x0F) + 0x30 );
		for (int i = 0; i < sizeof(settings); i++){
     738:	21 96       	adiw	r28, 0x01	; 1
     73a:	ce 01       	movw	r24, r28
     73c:	c9 30       	cpi	r28, 0x09	; 9
     73e:	d1 05       	cpc	r29, r1
     740:	69 f7       	brne	.-38     	; 0x71c <main+0x17a>
     742:	20 ed       	ldi	r18, 0xD0	; 208
     744:	37 e0       	ldi	r19, 0x07	; 7
     746:	c7 01       	movw	r24, r14
     748:	01 97       	sbiw	r24, 0x01	; 1
     74a:	f1 f7       	brne	.-4      	; 0x748 <main+0x1a6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     74c:	21 50       	subi	r18, 0x01	; 1
     74e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     750:	d1 f7       	brne	.-12     	; 0x746 <main+0x1a4>
     752:	89 cf       	rjmp	.-238    	; 0x666 <main+0xc4>
			ok_pressed = 0;
			bool bDone = false;
			if (MODES[mode].finally != NULL){
				bDone = MODES[mode].finally();
			}
			if (bDone == true){
     754:	28 e8       	ldi	r18, 0x88	; 136
     756:	33 e1       	ldi	r19, 0x13	; 19
     758:	c7 01       	movw	r24, r14
     75a:	01 97       	sbiw	r24, 0x01	; 1
     75c:	f1 f7       	brne	.-4      	; 0x75a <main+0x1b8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     75e:	21 50       	subi	r18, 0x01	; 1
     760:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     762:	d1 f7       	brne	.-12     	; 0x758 <main+0x1b6>
				_delay_ms(500);
				lcd_clrscr();
     764:	d2 d2       	rcall	.+1444   	; 0xd0a <lcd_clrscr>
				mode = 0;
     766:	10 92 d0 01 	sts	0x01D0, r1
     76a:	a5 cf       	rjmp	.-182    	; 0x6b6 <main+0x114>
	
	for (;;) { /* loop forever */
		if (mode_pressed) //mode button pressed
		{
			if (mode < NELEMS(MODES)-1){
                mode+=1;
     76c:	8f 5f       	subi	r24, 0xFF	; 255
     76e:	80 93 d0 01 	sts	0x01D0, r24
				lcd_clrscr();                
     772:	cb d2       	rcall	.+1430   	; 0xd0a <lcd_clrscr>
     774:	83 cf       	rjmp	.-250    	; 0x67c <main+0xda>

00000776 <save_settings>:
	return true; //we never reach this
};


bool save_settings(void){
    eeprom_busy_wait();
     776:	e1 99       	sbic	0x1c, 1	; 28
     778:	fe cf       	rjmp	.-4      	; 0x776 <save_settings>
	//eeprom_update_block (&ee_settings, &settings, sizeof(settings));
	eeprom_update_block (&settings, &ee_settings, sizeof(settings));
     77a:	8e ea       	ldi	r24, 0xAE	; 174
     77c:	91 e0       	ldi	r25, 0x01	; 1
     77e:	60 e0       	ldi	r22, 0x00	; 0
     780:	70 e0       	ldi	r23, 0x00	; 0
     782:	49 e0       	ldi	r20, 0x09	; 9
     784:	50 e0       	ldi	r21, 0x00	; 0
     786:	c3 d6       	rcall	.+3462   	; 0x150e <__eeupd_block_m8>
	eeprom_busy_wait();
     788:	e1 99       	sbic	0x1c, 1	; 28
     78a:	fe cf       	rjmp	.-4      	; 0x788 <save_settings+0x12>
    lcd_clrscr();
     78c:	be d2       	rcall	.+1404   	; 0xd0a <lcd_clrscr>
    lcd_gotoxy(4,0); 
     78e:	84 e0       	ldi	r24, 0x04	; 4
     790:	60 e0       	ldi	r22, 0x00	; 0
     792:	a8 d2       	rcall	.+1360   	; 0xce4 <lcd_gotoxy>
    lcd_puts("Saved. Will restart");
     794:	88 e0       	ldi	r24, 0x08	; 8
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	03 d3       	rcall	.+1542   	; 0xda0 <lcd_puts>
     79a:	20 e1       	ldi	r18, 0x10	; 16
     79c:	37 e2       	ldi	r19, 0x27	; 39
     79e:	48 ec       	ldi	r20, 0xC8	; 200
     7a0:	50 e0       	ldi	r21, 0x00	; 0
     7a2:	ca 01       	movw	r24, r20
     7a4:	01 97       	sbiw	r24, 0x01	; 1
     7a6:	f1 f7       	brne	.-4      	; 0x7a4 <save_settings+0x2e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7a8:	21 50       	subi	r18, 0x01	; 1
     7aa:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7ac:	d1 f7       	brne	.-12     	; 0x7a2 <save_settings+0x2c>


bool restart (void){
	//reset

	asm("ldi r30,0"); asm("ldi r31,0"); asm("ijmp");
     7ae:	e0 e0       	ldi	r30, 0x00	; 0
     7b0:	f0 e0       	ldi	r31, 0x00	; 0
     7b2:	09 94       	ijmp
    lcd_gotoxy(4,0); 
    lcd_puts("Saved. Will restart");
    _delay_ms(1000);
	restart();
	return true; // will never reach here
}
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	08 95       	ret

000007b8 <usart_init>:
char *rx_buffer_pointer_out	= &usart_rx_buffer[0];
	
//----------------------------------------------------------------------------
//Init serielle Schnittstelle
void usart_init(unsigned long baudrate) 
{ 
     7b8:	9b 01       	movw	r18, r22
     7ba:	ac 01       	movw	r20, r24
	//Serielle Schnittstelle 1
  	//Enable TXEN im Register UCR TX-Data Enable
	UCR =(1 << TXEN | 1 << RXEN | 1<< RXCIE);
     7bc:	88 e9       	ldi	r24, 0x98	; 152
     7be:	8a b9       	out	0x0a, r24	; 10
	// 2 = Parity Mode Enabled, Odd Parity
	//UCSRC = 0x06 + ((parity+1)<<4);
	//UCSRC |= (1<<USBS);
	//Teiler wird gesetzt 
	// Set baud rate
	UCSRA = 0;
     7c0:	1b b8       	out	0x0b, r1	; 11
	// Enable receiver and transmitter
	UBRR=(F_CPU / (baudrate * 16L) - 1);
     7c2:	22 0f       	add	r18, r18
     7c4:	33 1f       	adc	r19, r19
     7c6:	44 1f       	adc	r20, r20
     7c8:	55 1f       	adc	r21, r21
     7ca:	22 0f       	add	r18, r18
     7cc:	33 1f       	adc	r19, r19
     7ce:	44 1f       	adc	r20, r20
     7d0:	55 1f       	adc	r21, r21
     7d2:	22 0f       	add	r18, r18
     7d4:	33 1f       	adc	r19, r19
     7d6:	44 1f       	adc	r20, r20
     7d8:	55 1f       	adc	r21, r21
     7da:	22 0f       	add	r18, r18
     7dc:	33 1f       	adc	r19, r19
     7de:	44 1f       	adc	r20, r20
     7e0:	55 1f       	adc	r21, r21
     7e2:	60 e0       	ldi	r22, 0x00	; 0
     7e4:	72 e1       	ldi	r23, 0x12	; 18
     7e6:	8a e7       	ldi	r24, 0x7A	; 122
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	f5 d5       	rcall	.+3050   	; 0x13d6 <__udivmodsi4>
     7ec:	21 50       	subi	r18, 0x01	; 1
     7ee:	29 b9       	out	0x09, r18	; 9
	usart_status.usart_disable = 0;
     7f0:	80 91 d3 01 	lds	r24, 0x01D3
     7f4:	8b 7f       	andi	r24, 0xFB	; 251
     7f6:	80 93 d3 01 	sts	0x01D3, r24
}
     7fa:	08 95       	ret

000007fc <usart_write_char>:

//----------------------------------------------------------------------------
//Routine für die Serielle Ausgabe eines Zeichens (Schnittstelle0)
void usart_write_char(char c)
{
     7fc:	98 2f       	mov	r25, r24
        if(!usart_status.usart_disable)
     7fe:	80 91 d3 01 	lds	r24, 0x01D3
     802:	82 fd       	sbrc	r24, 2
     804:	03 c0       	rjmp	.+6      	; 0x80c <usart_write_char+0x10>
        {
            //Warten solange bis Zeichen gesendet wurde
            while(!(USR & (1<<UDRE)));
     806:	5d 9b       	sbis	0x0b, 5	; 11
     808:	fe cf       	rjmp	.-4      	; 0x806 <usart_write_char+0xa>
            //Ausgabe des Zeichens
            UDR = c;
     80a:	9c b9       	out	0x0c, r25	; 12
     80c:	08 95       	ret

0000080e <usart_write_str>:
}

//----------------------------------------------------------------------------
//Ausgabe eines Strings
void usart_write_str(char *str)
{
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	ec 01       	movw	r28, r24
	
	while (*str)
     814:	88 81       	ld	r24, Y
     816:	88 23       	and	r24, r24
     818:	29 f0       	breq	.+10     	; 0x824 <usart_write_str+0x16>
	{
		usart_write_char(*str++);
     81a:	21 96       	adiw	r28, 0x01	; 1
     81c:	ef df       	rcall	.-34     	; 0x7fc <usart_write_char>
//----------------------------------------------------------------------------
//Ausgabe eines Strings
void usart_write_str(char *str)
{
	
	while (*str)
     81e:	88 81       	ld	r24, Y
     820:	88 23       	and	r24, r24
     822:	d9 f7       	brne	.-10     	; 0x81a <usart_write_str+0xc>
	{
		usart_write_char(*str++);
	}
}
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	08 95       	ret

0000082a <__vector_11>:

//----------------------------------------------------------------------------
//Empfang eines Zeichens

ISR (USART_RX)
{
     82a:	1f 92       	push	r1
     82c:	0f 92       	push	r0
     82e:	0f b6       	in	r0, 0x3f	; 63
     830:	0f 92       	push	r0
     832:	11 24       	eor	r1, r1
     834:	1f 93       	push	r17
     836:	2f 93       	push	r18
     838:	3f 93       	push	r19
     83a:	4f 93       	push	r20
     83c:	5f 93       	push	r21
     83e:	6f 93       	push	r22
     840:	7f 93       	push	r23
     842:	8f 93       	push	r24
     844:	9f 93       	push	r25
     846:	af 93       	push	r26
     848:	bf 93       	push	r27
     84a:	ef 93       	push	r30
     84c:	ff 93       	push	r31
	if(!usart_status.usart_disable)
     84e:	80 91 d3 01 	lds	r24, 0x01D3
     852:	82 ff       	sbrs	r24, 2
     854:	28 c0       	rjmp	.+80     	; 0x8a6 <__vector_11+0x7c>
			usart_rx_buffer[buffercounter++] = receive_char;    
		}
	}
	else
	{
		if(rx_buffer_pointer_in == (rx_buffer_pointer_out - 1))
     856:	20 91 90 01 	lds	r18, 0x0190
     85a:	30 91 91 01 	lds	r19, 0x0191
     85e:	80 91 92 01 	lds	r24, 0x0192
     862:	90 91 93 01 	lds	r25, 0x0193
     866:	01 97       	sbiw	r24, 0x01	; 1
     868:	28 17       	cp	r18, r24
     86a:	39 07       	cpc	r19, r25
     86c:	51 f0       	breq	.+20     	; 0x882 <__vector_11+0x58>
		{
			//Datenverlust
			return;
		}
	
		*rx_buffer_pointer_in++ = UDR;
     86e:	8c b1       	in	r24, 0x0c	; 12
     870:	f9 01       	movw	r30, r18
     872:	81 93       	st	Z+, r24
     874:	f0 93 91 01 	sts	0x0191, r31
     878:	e0 93 90 01 	sts	0x0190, r30
	
		if (rx_buffer_pointer_in == &usart_rx_buffer[BUFFER_SIZE-1])
     87c:	e3 5f       	subi	r30, 0xF3	; 243
     87e:	f1 40       	sbci	r31, 0x01	; 1
     880:	b9 f1       	breq	.+110    	; 0x8f0 <__vector_11+0xc6>
		{
			rx_buffer_pointer_in = &usart_rx_buffer[0];
		}
	}
	return;
}
     882:	ff 91       	pop	r31
     884:	ef 91       	pop	r30
     886:	bf 91       	pop	r27
     888:	af 91       	pop	r26
     88a:	9f 91       	pop	r25
     88c:	8f 91       	pop	r24
     88e:	7f 91       	pop	r23
     890:	6f 91       	pop	r22
     892:	5f 91       	pop	r21
     894:	4f 91       	pop	r20
     896:	3f 91       	pop	r19
     898:	2f 91       	pop	r18
     89a:	1f 91       	pop	r17
     89c:	0f 90       	pop	r0
     89e:	0f be       	out	0x3f, r0	; 63
     8a0:	0f 90       	pop	r0
     8a2:	1f 90       	pop	r1
     8a4:	18 95       	reti
ISR (USART_RX)
{
	if(!usart_status.usart_disable)
	{ 
		unsigned char receive_char;
		receive_char = (UDR);
     8a6:	1c b1       	in	r17, 0x0c	; 12
		
		#if USART_ECHO
		usart_write_char(receive_char);
     8a8:	81 2f       	mov	r24, r17
     8aa:	a8 df       	rcall	.-176    	; 0x7fc <usart_write_char>
		#endif
	
		if (usart_status.usart_ready)
     8ac:	80 91 d3 01 	lds	r24, 0x01D3
     8b0:	80 fd       	sbrc	r24, 0
     8b2:	18 c0       	rjmp	.+48     	; 0x8e4 <__vector_11+0xba>
		{
			usart_status.usart_rx_ovl = 1;
			return; 
		}
        
        if (receive_char == 0x08)
     8b4:	18 30       	cpi	r17, 0x08	; 8
     8b6:	19 f1       	breq	.+70     	; 0x8fe <__vector_11+0xd4>
        {
            if (buffercounter) buffercounter--;
            return;
        }
    
		if (receive_char == '\r' && (!(usart_rx_buffer[buffercounter-1] == '\\')))
     8b8:	1d 30       	cpi	r17, 0x0D	; 13
     8ba:	91 f1       	breq	.+100    	; 0x920 <__vector_11+0xf6>
			buffercounter = 0;
			usart_status.usart_ready = 1;
			return;    
		}
	
		if (buffercounter < BUFFER_SIZE - 1)
     8bc:	80 91 ab 01 	lds	r24, 0x01AB
     8c0:	90 91 ac 01 	lds	r25, 0x01AC
     8c4:	43 97       	sbiw	r24, 0x13	; 19
     8c6:	e8 f6       	brcc	.-70     	; 0x882 <__vector_11+0x58>
		{
			usart_rx_buffer[buffercounter++] = receive_char;    
     8c8:	80 91 ab 01 	lds	r24, 0x01AB
     8cc:	90 91 ac 01 	lds	r25, 0x01AC
     8d0:	fc 01       	movw	r30, r24
     8d2:	e0 52       	subi	r30, 0x20	; 32
     8d4:	fe 4f       	sbci	r31, 0xFE	; 254
     8d6:	10 83       	st	Z, r17
     8d8:	01 96       	adiw	r24, 0x01	; 1
     8da:	90 93 ac 01 	sts	0x01AC, r25
     8de:	80 93 ab 01 	sts	0x01AB, r24
     8e2:	cf cf       	rjmp	.-98     	; 0x882 <__vector_11+0x58>
		usart_write_char(receive_char);
		#endif
	
		if (usart_status.usart_ready)
		{
			usart_status.usart_rx_ovl = 1;
     8e4:	80 91 d3 01 	lds	r24, 0x01D3
     8e8:	82 60       	ori	r24, 0x02	; 2
     8ea:	80 93 d3 01 	sts	0x01D3, r24
     8ee:	c9 cf       	rjmp	.-110    	; 0x882 <__vector_11+0x58>
	
		*rx_buffer_pointer_in++ = UDR;
	
		if (rx_buffer_pointer_in == &usart_rx_buffer[BUFFER_SIZE-1])
		{
			rx_buffer_pointer_in = &usart_rx_buffer[0];
     8f0:	22 51       	subi	r18, 0x12	; 18
     8f2:	30 40       	sbci	r19, 0x00	; 0
     8f4:	30 93 91 01 	sts	0x0191, r19
     8f8:	20 93 90 01 	sts	0x0190, r18
     8fc:	c2 cf       	rjmp	.-124    	; 0x882 <__vector_11+0x58>
			return; 
		}
        
        if (receive_char == 0x08)
        {
            if (buffercounter) buffercounter--;
     8fe:	80 91 ab 01 	lds	r24, 0x01AB
     902:	90 91 ac 01 	lds	r25, 0x01AC
     906:	89 2b       	or	r24, r25
     908:	09 f4       	brne	.+2      	; 0x90c <__vector_11+0xe2>
     90a:	bb cf       	rjmp	.-138    	; 0x882 <__vector_11+0x58>
     90c:	80 91 ab 01 	lds	r24, 0x01AB
     910:	90 91 ac 01 	lds	r25, 0x01AC
     914:	01 97       	sbiw	r24, 0x01	; 1
     916:	90 93 ac 01 	sts	0x01AC, r25
     91a:	80 93 ab 01 	sts	0x01AB, r24
     91e:	b1 cf       	rjmp	.-158    	; 0x882 <__vector_11+0x58>
            return;
        }
    
		if (receive_char == '\r' && (!(usart_rx_buffer[buffercounter-1] == '\\')))
     920:	e0 91 ab 01 	lds	r30, 0x01AB
     924:	f0 91 ac 01 	lds	r31, 0x01AC
     928:	e1 52       	subi	r30, 0x21	; 33
     92a:	fe 4f       	sbci	r31, 0xFE	; 254
     92c:	80 81       	ld	r24, Z
     92e:	8c 35       	cpi	r24, 0x5C	; 92
     930:	29 f2       	breq	.-118    	; 0x8bc <__vector_11+0x92>
		{
			usart_rx_buffer[buffercounter] = 0;
     932:	e0 91 ab 01 	lds	r30, 0x01AB
     936:	f0 91 ac 01 	lds	r31, 0x01AC
     93a:	e0 52       	subi	r30, 0x20	; 32
     93c:	fe 4f       	sbci	r31, 0xFE	; 254
     93e:	10 82       	st	Z, r1
			buffercounter = 0;
     940:	10 92 ac 01 	sts	0x01AC, r1
     944:	10 92 ab 01 	sts	0x01AB, r1
			usart_status.usart_ready = 1;
     948:	80 91 d3 01 	lds	r24, 0x01D3
     94c:	81 60       	ori	r24, 0x01	; 1
     94e:	80 93 d3 01 	sts	0x01D3, r24
     952:	97 cf       	rjmp	.-210    	; 0x882 <__vector_11+0x58>

00000954 <usart_write_P>:
        return;    
}

//------------------------------------------------------------------------------
void usart_write_P (const char *Buffer,...)
{
     954:	6f 92       	push	r6
     956:	7f 92       	push	r7
     958:	8f 92       	push	r8
     95a:	9f 92       	push	r9
     95c:	af 92       	push	r10
     95e:	bf 92       	push	r11
     960:	cf 92       	push	r12
     962:	df 92       	push	r13
     964:	ef 92       	push	r14
     966:	ff 92       	push	r15
     968:	0f 93       	push	r16
     96a:	1f 93       	push	r17
     96c:	df 93       	push	r29
     96e:	cf 93       	push	r28
     970:	cd b7       	in	r28, 0x3d	; 61
     972:	de b7       	in	r29, 0x3e	; 62
     974:	64 97       	sbiw	r28, 0x14	; 20
     976:	0f b6       	in	r0, 0x3f	; 63
     978:	f8 94       	cli
     97a:	de bf       	out	0x3e, r29	; 62
     97c:	0f be       	out	0x3f, r0	; 63
     97e:	cd bf       	out	0x3d, r28	; 61
     980:	8e 01       	movw	r16, r28
     982:	0b 5d       	subi	r16, 0xDB	; 219
     984:	1f 4f       	sbci	r17, 0xFF	; 255
     986:	f8 01       	movw	r30, r16
     988:	e1 90       	ld	r14, Z+
     98a:	f1 90       	ld	r15, Z+
     98c:	8f 01       	movw	r16, r30
     98e:	99 24       	eor	r9, r9
				case 'x':
					Base = 16;
					//****************************
					ConversionLoop:
					//****************************
					itoa(va_arg(ap,int),str_buffer,Base);
     990:	5e 01       	movw	r10, r28
     992:	08 94       	sec
     994:	a1 1c       	adc	r10, r1
     996:	b1 1c       	adc	r11, r1
					while (str_buffer[b++] != 0){};
					b--;
					if (b<move)
						{
						move -=b;
						for (tmp = 0;tmp<move;tmp++)
     998:	6b e0       	ldi	r22, 0x0B	; 11
     99a:	66 2e       	mov	r6, r22
     99c:	71 2c       	mov	r7, r1
     99e:	6c 0e       	add	r6, r28
     9a0:	7d 1e       	adc	r7, r29
							{
							str_null_buffer[tmp] = '0';
     9a2:	50 e3       	ldi	r21, 0x30	; 48
     9a4:	85 2e       	mov	r8, r21
	char *ptr;
		
	//Ausgabe der Zeichen
    for(;;)
	{
		by = pgm_read_byte(Buffer++);
     9a6:	f7 01       	movw	r30, r14
     9a8:	84 91       	lpm	r24, Z+
		if(by==0) break; // end of format string
     9aa:	88 23       	and	r24, r24
     9ac:	11 f1       	breq	.+68     	; 0x9f2 <usart_write_P+0x9e>
	char *ptr;
		
	//Ausgabe der Zeichen
    for(;;)
	{
		by = pgm_read_byte(Buffer++);
     9ae:	08 94       	sec
     9b0:	e1 1c       	adc	r14, r1
     9b2:	f1 1c       	adc	r15, r1
		if(by==0) break; // end of format string
            
		if (by == '%')
     9b4:	85 32       	cpi	r24, 0x25	; 37
     9b6:	09 f0       	breq	.+2      	; 0x9ba <usart_write_P+0x66>
     9b8:	3b c0       	rjmp	.+118    	; 0xa30 <usart_write_P+0xdc>
		{
            by = pgm_read_byte(Buffer++);
     9ba:	f7 01       	movw	r30, r14
     9bc:	08 94       	sec
     9be:	e1 1c       	adc	r14, r1
     9c0:	f1 1c       	adc	r15, r1
     9c2:	24 91       	lpm	r18, Z+
			if (isdigit(by)>0)
     9c4:	82 2f       	mov	r24, r18
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	c0 97       	sbiw	r24, 0x30	; 48
     9ca:	0a 97       	sbiw	r24, 0x0a	; 10
     9cc:	08 f4       	brcc	.+2      	; 0x9d0 <usart_write_P+0x7c>
     9ce:	75 c0       	rjmp	.+234    	; 0xaba <usart_write_P+0x166>
     9d0:	82 2f       	mov	r24, r18
				str_null_buffer[1] = '\0';
				move = atoi(str_null_buffer);
                by = pgm_read_byte(Buffer++);
				}

			switch (by)
     9d2:	89 36       	cpi	r24, 0x69	; 105
     9d4:	09 f4       	brne	.+2      	; 0x9d8 <usart_write_P+0x84>
     9d6:	7e c0       	rjmp	.+252    	; 0xad4 <usart_write_P+0x180>
     9d8:	8a 36       	cpi	r24, 0x6A	; 106
     9da:	70 f5       	brcc	.+92     	; 0xa38 <usart_write_P+0xe4>
     9dc:	82 36       	cpi	r24, 0x62	; 98
     9de:	09 f4       	brne	.+2      	; 0x9e2 <usart_write_P+0x8e>
     9e0:	7c c0       	rjmp	.+248    	; 0xada <usart_write_P+0x186>
     9e2:	83 36       	cpi	r24, 0x63	; 99
     9e4:	d9 f0       	breq	.+54     	; 0xa1c <usart_write_P+0xc8>
        return;    
}

//------------------------------------------------------------------------------
void usart_write_P (const char *Buffer,...)
{
     9e6:	68 01       	movw	r12, r16
     9e8:	86 01       	movw	r16, r12
	char *ptr;
		
	//Ausgabe der Zeichen
    for(;;)
	{
		by = pgm_read_byte(Buffer++);
     9ea:	f7 01       	movw	r30, r14
     9ec:	84 91       	lpm	r24, Z+
		if(by==0) break; // end of format string
     9ee:	88 23       	and	r24, r24
     9f0:	f1 f6       	brne	.-68     	; 0x9ae <usart_write_P+0x5a>
		{
			usart_write_char ( by );	
		}
	}
	va_end(ap);
}
     9f2:	64 96       	adiw	r28, 0x14	; 20
     9f4:	0f b6       	in	r0, 0x3f	; 63
     9f6:	f8 94       	cli
     9f8:	de bf       	out	0x3e, r29	; 62
     9fa:	0f be       	out	0x3f, r0	; 63
     9fc:	cd bf       	out	0x3d, r28	; 61
     9fe:	cf 91       	pop	r28
     a00:	df 91       	pop	r29
     a02:	1f 91       	pop	r17
     a04:	0f 91       	pop	r16
     a06:	ff 90       	pop	r15
     a08:	ef 90       	pop	r14
     a0a:	df 90       	pop	r13
     a0c:	cf 90       	pop	r12
     a0e:	bf 90       	pop	r11
     a10:	af 90       	pop	r10
     a12:	9f 90       	pop	r9
     a14:	8f 90       	pop	r8
     a16:	7f 90       	pop	r7
     a18:	6f 90       	pop	r6
     a1a:	08 95       	ret
				case 'b':
					Base = 2;
					goto ConversionLoop;
				case 'c':
					//Int to char
					format_flag = va_arg(ap,int);
     a1c:	32 e0       	ldi	r19, 0x02	; 2
     a1e:	c3 2e       	mov	r12, r19
     a20:	d1 2c       	mov	r13, r1
     a22:	c0 0e       	add	r12, r16
     a24:	d1 1e       	adc	r13, r17
					usart_write_char (format_flag++);
     a26:	f8 01       	movw	r30, r16
     a28:	80 81       	ld	r24, Z
     a2a:	e8 de       	rcall	.-560    	; 0x7fc <usart_write_char>
        return;    
}

//------------------------------------------------------------------------------
void usart_write_P (const char *Buffer,...)
{
     a2c:	86 01       	movw	r16, r12
     a2e:	dd cf       	rjmp	.-70     	; 0x9ea <usart_write_P+0x96>
				}
			
			}	
		else
		{
			usart_write_char ( by );	
     a30:	e5 de       	rcall	.-566    	; 0x7fc <usart_write_char>
     a32:	68 01       	movw	r12, r16
        return;    
}

//------------------------------------------------------------------------------
void usart_write_P (const char *Buffer,...)
{
     a34:	86 01       	movw	r16, r12
     a36:	d9 cf       	rjmp	.-78     	; 0x9ea <usart_write_P+0x96>
				str_null_buffer[1] = '\0';
				move = atoi(str_null_buffer);
                by = pgm_read_byte(Buffer++);
				}

			switch (by)
     a38:	83 37       	cpi	r24, 0x73	; 115
     a3a:	09 f4       	brne	.+2      	; 0xa3e <usart_write_P+0xea>
     a3c:	54 c0       	rjmp	.+168    	; 0xae6 <usart_write_P+0x192>
     a3e:	88 37       	cpi	r24, 0x78	; 120
     a40:	09 f4       	brne	.+2      	; 0xa44 <usart_write_P+0xf0>
     a42:	4e c0       	rjmp	.+156    	; 0xae0 <usart_write_P+0x18c>
     a44:	8f 36       	cpi	r24, 0x6F	; 111
     a46:	79 f6       	brne	.-98     	; 0x9e6 <usart_write_P+0x92>
					goto ConversionLoop;
				case 'c':
					//Int to char
					format_flag = va_arg(ap,int);
					usart_write_char (format_flag++);
					break;
     a48:	48 e0       	ldi	r20, 0x08	; 8
     a4a:	50 e0       	ldi	r21, 0x00	; 0
				case 'x':
					Base = 16;
					//****************************
					ConversionLoop:
					//****************************
					itoa(va_arg(ap,int),str_buffer,Base);
     a4c:	22 e0       	ldi	r18, 0x02	; 2
     a4e:	c2 2e       	mov	r12, r18
     a50:	d1 2c       	mov	r13, r1
     a52:	c0 0e       	add	r12, r16
     a54:	d1 1e       	adc	r13, r17
     a56:	f8 01       	movw	r30, r16
     a58:	80 81       	ld	r24, Z
     a5a:	91 81       	ldd	r25, Z+1	; 0x01
     a5c:	b5 01       	movw	r22, r10
     a5e:	20 d5       	rcall	.+2624   	; 0x14a0 <itoa>
     a60:	20 e0       	ldi	r18, 0x00	; 0
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	01 c0       	rjmp	.+2      	; 0xa68 <usart_write_P+0x114>
					int b=0;
					while (str_buffer[b++] != 0){};
     a66:	9a 01       	movw	r18, r20
     a68:	a9 01       	movw	r20, r18
     a6a:	4f 5f       	subi	r20, 0xFF	; 255
     a6c:	5f 4f       	sbci	r21, 0xFF	; 255
     a6e:	f5 01       	movw	r30, r10
     a70:	e2 0f       	add	r30, r18
     a72:	f3 1f       	adc	r31, r19
     a74:	80 81       	ld	r24, Z
     a76:	88 23       	and	r24, r24
     a78:	b1 f7       	brne	.-20     	; 0xa66 <usart_write_P+0x112>
					b--;
					if (b<move)
     a7a:	89 2d       	mov	r24, r9
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	28 17       	cp	r18, r24
     a80:	39 07       	cpc	r19, r25
     a82:	b4 f4       	brge	.+44     	; 0xab0 <usart_write_P+0x15c>
						{
						move -=b;
     a84:	92 1a       	sub	r9, r18
						for (tmp = 0;tmp<move;tmp++)
     a86:	a9 2d       	mov	r26, r9
     a88:	b0 e0       	ldi	r27, 0x00	; 0
     a8a:	10 97       	sbiw	r26, 0x00	; 0
     a8c:	41 f0       	breq	.+16     	; 0xa9e <usart_write_P+0x14a>
     a8e:	f3 01       	movw	r30, r6
     a90:	c3 01       	movw	r24, r6
     a92:	8a 0f       	add	r24, r26
     a94:	9b 1f       	adc	r25, r27
							{
							str_null_buffer[tmp] = '0';
     a96:	81 92       	st	Z+, r8
					while (str_buffer[b++] != 0){};
					b--;
					if (b<move)
						{
						move -=b;
						for (tmp = 0;tmp<move;tmp++)
     a98:	e8 17       	cp	r30, r24
     a9a:	f9 07       	cpc	r31, r25
     a9c:	e1 f7       	brne	.-8      	; 0xa96 <usart_write_P+0x142>
							{
							str_null_buffer[tmp] = '0';
							}
						//tmp ++;
						str_null_buffer[tmp] = '\0';
     a9e:	a6 0d       	add	r26, r6
     aa0:	b7 1d       	adc	r27, r7
     aa2:	1c 92       	st	X, r1
						strcat(str_null_buffer,str_buffer);
     aa4:	c3 01       	movw	r24, r6
     aa6:	b5 01       	movw	r22, r10
     aa8:	e9 d4       	rcall	.+2514   	; 0x147c <strcat>
						strcpy(str_buffer,str_null_buffer);
     aaa:	c5 01       	movw	r24, r10
     aac:	b3 01       	movw	r22, r6
     aae:	f1 d4       	rcall	.+2530   	; 0x1492 <strcpy>
						}
					usart_write_str (str_buffer);
     ab0:	c5 01       	movw	r24, r10
     ab2:	ad de       	rcall	.-678    	; 0x80e <usart_write_str>
     ab4:	99 24       	eor	r9, r9
        return;    
}

//------------------------------------------------------------------------------
void usart_write_P (const char *Buffer,...)
{
     ab6:	86 01       	movw	r16, r12
     ab8:	98 cf       	rjmp	.-208    	; 0x9ea <usart_write_P+0x96>
		{
            by = pgm_read_byte(Buffer++);
			if (isdigit(by)>0)
				{
                                 
 				str_null_buffer[0] = by;
     aba:	2b 87       	std	Y+11, r18	; 0x0b
				str_null_buffer[1] = '\0';
     abc:	1c 86       	std	Y+12, r1	; 0x0c
				move = atoi(str_null_buffer);
     abe:	c3 01       	movw	r24, r6
     ac0:	c0 d4       	rcall	.+2432   	; 0x1442 <atoi>
     ac2:	98 2e       	mov	r9, r24
                by = pgm_read_byte(Buffer++);
     ac4:	f7 01       	movw	r30, r14
     ac6:	08 94       	sec
     ac8:	e1 1c       	adc	r14, r1
     aca:	f1 1c       	adc	r15, r1
     acc:	84 91       	lpm	r24, Z+
				}

			switch (by)
     ace:	89 36       	cpi	r24, 0x69	; 105
     ad0:	09 f0       	breq	.+2      	; 0xad4 <usart_write_P+0x180>
     ad2:	82 cf       	rjmp	.-252    	; 0x9d8 <usart_write_P+0x84>
     ad4:	4a e0       	ldi	r20, 0x0A	; 10
     ad6:	50 e0       	ldi	r21, 0x00	; 0
     ad8:	b9 cf       	rjmp	.-142    	; 0xa4c <usart_write_P+0xf8>
     ada:	42 e0       	ldi	r20, 0x02	; 2
     adc:	50 e0       	ldi	r21, 0x00	; 0
     ade:	b6 cf       	rjmp	.-148    	; 0xa4c <usart_write_P+0xf8>
				case 'i':
					Base = 10;
					goto ConversionLoop;
				case 'o':
					Base = 8;
					goto ConversionLoop;
     ae0:	40 e1       	ldi	r20, 0x10	; 16
     ae2:	50 e0       	ldi	r21, 0x00	; 0
     ae4:	b3 cf       	rjmp	.-154    	; 0xa4c <usart_write_P+0xf8>
				}

			switch (by)
				{
                case 's':
                    ptr = va_arg(ap,char *);
     ae6:	42 e0       	ldi	r20, 0x02	; 2
     ae8:	c4 2e       	mov	r12, r20
     aea:	d1 2c       	mov	r13, r1
     aec:	c0 0e       	add	r12, r16
     aee:	d1 1e       	adc	r13, r17
     af0:	f8 01       	movw	r30, r16
     af2:	00 81       	ld	r16, Z
     af4:	11 81       	ldd	r17, Z+1	; 0x01
                    while(*ptr) { usart_write_char(*ptr++); }
     af6:	f8 01       	movw	r30, r16
     af8:	80 81       	ld	r24, Z
     afa:	88 23       	and	r24, r24
     afc:	09 f4       	brne	.+2      	; 0xb00 <usart_write_P+0x1ac>
     afe:	74 cf       	rjmp	.-280    	; 0x9e8 <usart_write_P+0x94>
     b00:	0f 5f       	subi	r16, 0xFF	; 255
     b02:	1f 4f       	sbci	r17, 0xFF	; 255
     b04:	7b de       	rcall	.-778    	; 0x7fc <usart_write_char>
     b06:	f8 01       	movw	r30, r16
     b08:	80 81       	ld	r24, Z
     b0a:	88 23       	and	r24, r24
     b0c:	c9 f7       	brne	.-14     	; 0xb00 <usart_write_P+0x1ac>
        return;    
}

//------------------------------------------------------------------------------
void usart_write_P (const char *Buffer,...)
{
     b0e:	86 01       	movw	r16, r12
     b10:	6c cf       	rjmp	.-296    	; 0x9ea <usart_write_P+0x96>

00000b12 <adc_init>:
#define ANALOG_ON  ADCSRA=(1<<ADEN)|(1<<ADSC)|(1<<ADIE)|(1<<ADFR)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)	

void adc_init(void)
{
//select reference voltage to internal 2,56 V reference
ADMUX = (1<<REFS1)|(1<<REFS0);
     b12:	80 ec       	ldi	r24, 0xC0	; 192
     b14:	87 b9       	out	0x07, r24	; 7
//Free Running Mode, Division Factor 128, Interrupt on
//ADCSRA |= (1<<ADSC)|(1<<ADIE)|(1<<ADFR)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
ANALOG_ON;
     b16:	8f ee       	ldi	r24, 0xEF	; 239
     b18:	86 b9       	out	0x06, r24	; 6
}
     b1a:	08 95       	ret

00000b1c <__vector_14>:

volatile uint8_t cnt;

ISR (ADC_vect)
{
     b1c:	1f 92       	push	r1
     b1e:	0f 92       	push	r0
     b20:	0f b6       	in	r0, 0x3f	; 63
     b22:	0f 92       	push	r0
     b24:	11 24       	eor	r1, r1
     b26:	2f 93       	push	r18
     b28:	3f 93       	push	r19
     b2a:	4f 93       	push	r20
     b2c:	8f 93       	push	r24
     b2e:	9f 93       	push	r25
     b30:	ef 93       	push	r30
     b32:	ff 93       	push	r31
    ANALOG_OFF; //ADC OFF
     b34:	16 b8       	out	0x06, r1	; 6
	ADC_VAL_STRUCT* thisMeas = &adc_val_arr[cnt];
     b36:	90 91 f5 01 	lds	r25, 0x01F5
     b3a:	86 e0       	ldi	r24, 0x06	; 6
     b3c:	98 9f       	mul	r25, r24
     b3e:	f0 01       	movw	r30, r0
     b40:	11 24       	eor	r1, r1
     b42:	ec 56       	subi	r30, 0x6C	; 108
     b44:	fe 4f       	sbci	r31, 0xFE	; 254
	
	thisMeas->accumulator += ADC; //collect in the accumulator
     b46:	24 b1       	in	r18, 0x04	; 4
     b48:	35 b1       	in	r19, 0x05	; 5
     b4a:	81 81       	ldd	r24, Z+1	; 0x01
     b4c:	92 81       	ldd	r25, Z+2	; 0x02
     b4e:	28 0f       	add	r18, r24
     b50:	39 1f       	adc	r19, r25
     b52:	32 83       	std	Z+2, r19	; 0x02
     b54:	21 83       	std	Z+1, r18	; 0x01
	
	if (thisMeas->counter%32 == 0){
     b56:	45 81       	ldd	r20, Z+5	; 0x05
     b58:	84 2f       	mov	r24, r20
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	8f 71       	andi	r24, 0x1F	; 31
     b5e:	90 70       	andi	r25, 0x00	; 0
     b60:	89 2b       	or	r24, r25
     b62:	61 f4       	brne	.+24     	; 0xb7c <__vector_14+0x60>
		thisMeas->value = (thisMeas->accumulator)>>5 ;	
     b64:	36 95       	lsr	r19
     b66:	27 95       	ror	r18
     b68:	32 95       	swap	r19
     b6a:	22 95       	swap	r18
     b6c:	2f 70       	andi	r18, 0x0F	; 15
     b6e:	23 27       	eor	r18, r19
     b70:	3f 70       	andi	r19, 0x0F	; 15
     b72:	23 27       	eor	r18, r19
     b74:	34 83       	std	Z+4, r19	; 0x04
     b76:	23 83       	std	Z+3, r18	; 0x03
		//simply shift left the latest 5 bits (corresponds to 32 samples). This is oversampling, we're keeping only the 10 bits, but have removed lot of noise
		thisMeas->accumulator = 0;
     b78:	12 82       	std	Z+2, r1	; 0x02
     b7a:	11 82       	std	Z+1, r1	; 0x01
	}
	thisMeas->counter += 1;	
     b7c:	4f 5f       	subi	r20, 0xFF	; 255
     b7e:	45 83       	std	Z+5, r20	; 0x05
	
	cnt++;		
     b80:	80 91 f5 01 	lds	r24, 0x01F5
     b84:	8f 5f       	subi	r24, 0xFF	; 255
     b86:	80 93 f5 01 	sts	0x01F5, r24
	if (cnt >= NO_OF_ANALOG_INPUTS) cnt = 0;
     b8a:	80 91 f5 01 	lds	r24, 0x01F5
     b8e:	83 30       	cpi	r24, 0x03	; 3
     b90:	10 f0       	brcs	.+4      	; 0xb96 <__vector_14+0x7a>
     b92:	10 92 f5 01 	sts	0x01F5, r1
		
    ADMUX = ((1<<REFS1) | (1<<REFS0)) | adc_val_arr[cnt].channel;
     b96:	80 91 f5 01 	lds	r24, 0x01F5
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	fc 01       	movw	r30, r24
     b9e:	ee 0f       	add	r30, r30
     ba0:	ff 1f       	adc	r31, r31
     ba2:	e8 0f       	add	r30, r24
     ba4:	f9 1f       	adc	r31, r25
     ba6:	ee 0f       	add	r30, r30
     ba8:	ff 1f       	adc	r31, r31
     baa:	ec 56       	subi	r30, 0x6C	; 108
     bac:	fe 4f       	sbci	r31, 0xFE	; 254
     bae:	80 81       	ld	r24, Z
     bb0:	80 6c       	ori	r24, 0xC0	; 192
     bb2:	87 b9       	out	0x07, r24	; 7
	
	ANALOG_ON;
     bb4:	8f ee       	ldi	r24, 0xEF	; 239
     bb6:	86 b9       	out	0x06, r24	; 6

}
     bb8:	ff 91       	pop	r31
     bba:	ef 91       	pop	r30
     bbc:	9f 91       	pop	r25
     bbe:	8f 91       	pop	r24
     bc0:	4f 91       	pop	r20
     bc2:	3f 91       	pop	r19
     bc4:	2f 91       	pop	r18
     bc6:	0f 90       	pop	r0
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	0f 90       	pop	r0
     bcc:	1f 90       	pop	r1
     bce:	18 95       	reti

00000bd0 <lcd_write>:
static void lcd_write(uint8_t data,uint8_t rs) 
{
#if LCD_4BIT_MODE==1    
    unsigned char dataBits ;

    if (rs) {   /* write data        (RS=1, RW=0) */
     bd0:	66 23       	and	r22, r22
     bd2:	49 f1       	breq	.+82     	; 0xc26 <lcd_write+0x56>
       lcd_rs_high();
     bd4:	93 9a       	sbi	0x12, 3	; 18
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
    }
    lcd_rw_low();
     bd6:	92 98       	cbi	0x12, 2	; 18
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     bd8:	8c 9a       	sbi	0x11, 4	; 17
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     bda:	8d 9a       	sbi	0x11, 5	; 17
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     bdc:	8e 9a       	sbi	0x11, 6	; 17
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     bde:	8f 9a       	sbi	0x11, 7	; 17
        
        /* output high nibble first */
	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     be0:	87 fd       	sbrc	r24, 7
     be2:	29 c0       	rjmp	.+82     	; 0xc36 <lcd_write+0x66>
	else LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     be4:	97 98       	cbi	0x12, 7	; 18
	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     be6:	86 ff       	sbrs	r24, 6
     be8:	29 c0       	rjmp	.+82     	; 0xc3c <lcd_write+0x6c>
     bea:	96 9a       	sbi	0x12, 6	; 18
	else LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     bec:	85 ff       	sbrs	r24, 5
     bee:	29 c0       	rjmp	.+82     	; 0xc42 <lcd_write+0x72>
     bf0:	95 9a       	sbi	0x12, 5	; 18
	else LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
     bf2:	84 ff       	sbrs	r24, 4
     bf4:	29 c0       	rjmp	.+82     	; 0xc48 <lcd_write+0x78>
     bf6:	94 9a       	sbi	0x12, 4	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     bf8:	c0 9a       	sbi	0x18, 0	; 24
    lcd_e_delay();
     bfa:	00 c0       	rjmp	.+0      	; 0xbfc <lcd_write+0x2c>
    lcd_e_low();
     bfc:	c0 98       	cbi	0x18, 0	; 24
	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
	else LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
	lcd_e_toggle();
        
        /* output low nibble */
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     bfe:	83 ff       	sbrs	r24, 3
     c00:	29 c0       	rjmp	.+82     	; 0xc54 <lcd_write+0x84>
     c02:	97 9a       	sbi	0x12, 7	; 18
	else LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     c04:	82 ff       	sbrs	r24, 2
     c06:	29 c0       	rjmp	.+82     	; 0xc5a <lcd_write+0x8a>
     c08:	96 9a       	sbi	0x12, 6	; 18
	else LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     c0a:	81 ff       	sbrs	r24, 1
     c0c:	29 c0       	rjmp	.+82     	; 0xc60 <lcd_write+0x90>
     c0e:	95 9a       	sbi	0x12, 5	; 18
        else LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     c10:	80 fd       	sbrc	r24, 0
     c12:	29 c0       	rjmp	.+82     	; 0xc66 <lcd_write+0x96>
        else LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     c14:	94 98       	cbi	0x12, 4	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     c16:	c0 9a       	sbi	0x18, 0	; 24
    lcd_e_delay();
     c18:	00 c0       	rjmp	.+0      	; 0xc1a <lcd_write+0x4a>
    lcd_e_low();
     c1a:	c0 98       	cbi	0x18, 0	; 24
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        else LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
        lcd_e_toggle();        
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     c1c:	94 9a       	sbi	0x12, 4	; 18
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     c1e:	95 9a       	sbi	0x12, 5	; 18
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     c20:	96 9a       	sbi	0x12, 6	; 18
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     c22:	97 9a       	sbi	0x12, 7	; 18
	LCD_DATA_PORT=data;
	lcd_e_toggle();
        /* all data pins high (inactive) */
	LCD_DATA_PORT=0xff;
#endif
}
     c24:	08 95       	ret
    unsigned char dataBits ;

    if (rs) {   /* write data        (RS=1, RW=0) */
       lcd_rs_high();
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
     c26:	93 98       	cbi	0x12, 3	; 18
    }
    lcd_rw_low();
     c28:	92 98       	cbi	0x12, 2	; 18
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     c2a:	8c 9a       	sbi	0x11, 4	; 17
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     c2c:	8d 9a       	sbi	0x11, 5	; 17
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     c2e:	8e 9a       	sbi	0x11, 6	; 17
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     c30:	8f 9a       	sbi	0x11, 7	; 17
        
        /* output high nibble first */
	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     c32:	87 ff       	sbrs	r24, 7
     c34:	d7 cf       	rjmp	.-82     	; 0xbe4 <lcd_write+0x14>
     c36:	97 9a       	sbi	0x12, 7	; 18
	else LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     c38:	86 fd       	sbrc	r24, 6
     c3a:	d7 cf       	rjmp	.-82     	; 0xbea <lcd_write+0x1a>
	else LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     c3c:	96 98       	cbi	0x12, 6	; 18
	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     c3e:	85 fd       	sbrc	r24, 5
     c40:	d7 cf       	rjmp	.-82     	; 0xbf0 <lcd_write+0x20>
	else LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     c42:	95 98       	cbi	0x12, 5	; 18
	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
     c44:	84 fd       	sbrc	r24, 4
     c46:	d7 cf       	rjmp	.-82     	; 0xbf6 <lcd_write+0x26>
	else LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     c48:	94 98       	cbi	0x12, 4	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     c4a:	c0 9a       	sbi	0x18, 0	; 24
    lcd_e_delay();
     c4c:	00 c0       	rjmp	.+0      	; 0xc4e <lcd_write+0x7e>
    lcd_e_low();
     c4e:	c0 98       	cbi	0x18, 0	; 24
	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
	else LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
	lcd_e_toggle();
        
        /* output low nibble */
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     c50:	83 fd       	sbrc	r24, 3
     c52:	d7 cf       	rjmp	.-82     	; 0xc02 <lcd_write+0x32>
	else LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     c54:	97 98       	cbi	0x12, 7	; 18
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     c56:	82 fd       	sbrc	r24, 2
     c58:	d7 cf       	rjmp	.-82     	; 0xc08 <lcd_write+0x38>
	else LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     c5a:	96 98       	cbi	0x12, 6	; 18
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     c5c:	81 fd       	sbrc	r24, 1
     c5e:	d7 cf       	rjmp	.-82     	; 0xc0e <lcd_write+0x3e>
        else LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     c60:	95 98       	cbi	0x12, 5	; 18
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     c62:	80 ff       	sbrs	r24, 0
     c64:	d7 cf       	rjmp	.-82     	; 0xc14 <lcd_write+0x44>
     c66:	94 9a       	sbi	0x12, 4	; 18
     c68:	d6 cf       	rjmp	.-84     	; 0xc16 <lcd_write+0x46>

00000c6a <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
     c6a:	88 23       	and	r24, r24
     c6c:	51 f1       	breq	.+84     	; 0xcc2 <lcd_read+0x58>
        lcd_rs_high();                       /* RS=1: read data      */
     c6e:	93 9a       	sbi	0x12, 3	; 18
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
    lcd_rw_high();                           /* RW=1  read mode      */
     c70:	92 9a       	sbi	0x12, 2	; 18
	LCD_DATA0_PORT = 0x0F;
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
     c72:	8c 98       	cbi	0x11, 4	; 17
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
     c74:	8d 98       	cbi	0x11, 5	; 17
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
     c76:	8e 98       	cbi	0x11, 6	; 17
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
     c78:	8f 98       	cbi	0x11, 7	; 17
                
        /* read high nibble first */
        lcd_e_high();
     c7a:	c0 9a       	sbi	0x18, 0	; 24
        lcd_e_delay();        
     c7c:	00 c0       	rjmp	.+0      	; 0xc7e <lcd_read+0x14>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     c7e:	84 9b       	sbis	0x10, 4	; 16
     c80:	1e c0       	rjmp	.+60     	; 0xcbe <lcd_read+0x54>
     c82:	80 e1       	ldi	r24, 0x10	; 16
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
     c84:	85 99       	sbic	0x10, 5	; 16
     c86:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
     c88:	86 99       	sbic	0x10, 6	; 16
     c8a:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
     c8c:	87 99       	sbic	0x10, 7	; 16
     c8e:	1b c0       	rjmp	.+54     	; 0xcc6 <lcd_read+0x5c>
        lcd_e_low();
     c90:	c0 98       	cbi	0x18, 0	; 24

        lcd_e_delay();                       /* Enable 500ns low       */
     c92:	00 c0       	rjmp	.+0      	; 0xc94 <lcd_read+0x2a>
    
        /* read low nibble */    
        lcd_e_high();
     c94:	c0 9a       	sbi	0x18, 0	; 24
        lcd_e_delay();
     c96:	00 c0       	rjmp	.+0      	; 0xc98 <lcd_read+0x2e>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
     c98:	84 99       	sbic	0x10, 4	; 16
     c9a:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
     c9c:	85 99       	sbic	0x10, 5	; 16
     c9e:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
     ca0:	86 99       	sbic	0x10, 6	; 16
     ca2:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
     ca4:	87 99       	sbic	0x10, 7	; 16
     ca6:	88 60       	ori	r24, 0x08	; 8
	lcd_e_low();
     ca8:	c0 98       	cbi	0x18, 0	; 24
        /* all data pins high (inactive) */
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     caa:	8c 9a       	sbi	0x11, 4	; 17
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     cac:	8d 9a       	sbi	0x11, 5	; 17
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     cae:	8e 9a       	sbi	0x11, 6	; 17
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     cb0:	8f 9a       	sbi	0x11, 7	; 17
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     cb2:	94 9a       	sbi	0x12, 4	; 18
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     cb4:	95 9a       	sbi	0x12, 5	; 18
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     cb6:	96 9a       	sbi	0x12, 6	; 18
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     cb8:	97 9a       	sbi	0x12, 7	; 18
        /* all data pins high (inactive) */
	DDR(LCD_DATA_PORT) = 0xff;         /* configure data pins as output */
	LCD_DATA_PORT=0xff;
#endif //LCD_4BIT_MODE==1
    
	lcd_rw_low();                          
     cba:	92 98       	cbi	0x12, 2	; 18
    return data;
}
     cbc:	08 95       	ret
                
        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();        
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	e1 cf       	rjmp	.-62     	; 0xc84 <lcd_read+0x1a>
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
     cc2:	93 98       	cbi	0x12, 3	; 18
     cc4:	d5 cf       	rjmp	.-86     	; 0xc70 <lcd_read+0x6>
        lcd_e_delay();        
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
     cc6:	80 68       	ori	r24, 0x80	; 128
     cc8:	e3 cf       	rjmp	.-58     	; 0xc90 <lcd_read+0x26>

00000cca <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	ce df       	rcall	.-100    	; 0xc6a <lcd_read>
     cce:	87 fd       	sbrc	r24, 7
     cd0:	fc cf       	rjmp	.-8      	; 0xcca <lcd_waitbusy>
    
}/* lcd_waitbusy */
     cd2:	08 95       	ret

00000cd4 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
     cd4:	1f 93       	push	r17
     cd6:	18 2f       	mov	r17, r24
    lcd_waitbusy();
     cd8:	f8 df       	rcall	.-16     	; 0xcca <lcd_waitbusy>
    lcd_write(cmd,0);
     cda:	81 2f       	mov	r24, r17
     cdc:	60 e0       	ldi	r22, 0x00	; 0
     cde:	78 df       	rcall	.-272    	; 0xbd0 <lcd_write>
}
     ce0:	1f 91       	pop	r17
     ce2:	08 95       	ret

00000ce4 <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
     ce4:	66 23       	and	r22, r22
     ce6:	19 f0       	breq	.+6      	; 0xcee <lcd_gotoxy+0xa>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
     ce8:	80 54       	subi	r24, 0x40	; 64
     cea:	f4 df       	rcall	.-24     	; 0xcd4 <lcd_command>
     cec:	08 95       	ret
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
     cee:	80 58       	subi	r24, 0x80	; 128
     cf0:	f1 df       	rcall	.-30     	; 0xcd4 <lcd_command>
     cf2:	08 95       	ret

00000cf4 <lcd_getxy>:
uint8_t lcd_getxy(void)
{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	b9 df       	rcall	.-142    	; 0xc6a <lcd_read>
     cf8:	87 fd       	sbrc	r24, 7
     cfa:	fc cf       	rjmp	.-8      	; 0xcf4 <lcd_getxy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     cfc:	8c e5       	ldi	r24, 0x5C	; 92
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	01 97       	sbiw	r24, 0x01	; 1
     d02:	f1 f7       	brne	.-4      	; 0xd00 <lcd_getxy+0xc>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(DELAY_READ_DATA);	// mt was 4

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	b1 df       	rcall	.-158    	; 0xc6a <lcd_read>
}
     d08:	08 95       	ret

00000d0a <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	e3 df       	rcall	.-58     	; 0xcd4 <lcd_command>
}
     d0e:	08 95       	ret

00000d10 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
     d10:	82 e0       	ldi	r24, 0x02	; 2
     d12:	e0 df       	rcall	.-64     	; 0xcd4 <lcd_command>
}
     d14:	08 95       	ret

00000d16 <lcd_scrollup>:
#ifdef LCD_SCROLL_FUNCTION
/*************************************************************************
Scroll up mtmt
*************************************************************************/
void lcd_scrollup(void)
{
     d16:	0f 93       	push	r16
     d18:	1f 93       	push	r17
     d1a:	00 ec       	ldi	r16, 0xC0	; 192
	}
#elif LCD_LINES==2
	uint8_t i,c;
	for (i=0;i<LCD_DISP_LENGTH;i++) {
		// line 2 to 1
		lcd_waitbusy();
     d1c:	d6 df       	rcall	.-84     	; 0xcca <lcd_waitbusy>
		lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2+i,0);
     d1e:	80 2f       	mov	r24, r16
     d20:	60 e0       	ldi	r22, 0x00	; 0
     d22:	56 df       	rcall	.-340    	; 0xbd0 <lcd_write>
		lcd_waitbusy();
     d24:	d2 df       	rcall	.-92     	; 0xcca <lcd_waitbusy>
		c=lcd_read(1);
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	a0 df       	rcall	.-192    	; 0xc6a <lcd_read>
     d2a:	18 2f       	mov	r17, r24
		lcd_waitbusy();
     d2c:	ce df       	rcall	.-100    	; 0xcca <lcd_waitbusy>
		lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1+i,0);
     d2e:	80 2f       	mov	r24, r16
     d30:	80 54       	subi	r24, 0x40	; 64
     d32:	60 e0       	ldi	r22, 0x00	; 0
     d34:	4d df       	rcall	.-358    	; 0xbd0 <lcd_write>
		lcd_waitbusy();
     d36:	c9 df       	rcall	.-110    	; 0xcca <lcd_waitbusy>
		lcd_write(c, 1);
     d38:	81 2f       	mov	r24, r17
     d3a:	61 e0       	ldi	r22, 0x01	; 1
     d3c:	49 df       	rcall	.-366    	; 0xbd0 <lcd_write>
		lcd_waitbusy();
     d3e:	c5 df       	rcall	.-118    	; 0xcca <lcd_waitbusy>
		lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2+i,0);
     d40:	80 2f       	mov	r24, r16
     d42:	60 e0       	ldi	r22, 0x00	; 0
     d44:	45 df       	rcall	.-374    	; 0xbd0 <lcd_write>
		lcd_waitbusy();
     d46:	c1 df       	rcall	.-126    	; 0xcca <lcd_waitbusy>
		lcd_write(' ', 1);
     d48:	80 e2       	ldi	r24, 0x20	; 32
     d4a:	61 e0       	ldi	r22, 0x01	; 1
     d4c:	41 df       	rcall	.-382    	; 0xbd0 <lcd_write>
		lcd_gotoxy(0,1);
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	61 e0       	ldi	r22, 0x01	; 1
     d52:	c8 df       	rcall	.-112    	; 0xce4 <lcd_gotoxy>
     d54:	0f 5f       	subi	r16, 0xFF	; 255
		lcd_write(' ', 1);
		lcd_gotoxy(0,3);
	}
#elif LCD_LINES==2
	uint8_t i,c;
	for (i=0;i<LCD_DISP_LENGTH;i++) {
     d56:	08 3d       	cpi	r16, 0xD8	; 216
     d58:	09 f7       	brne	.-62     	; 0xd1c <lcd_scrollup+0x6>
		lcd_gotoxy(0,1);
	}
#else
#warning "Scroll up avail. only for 4-line or 2-line displays"
#endif	
}
     d5a:	1f 91       	pop	r17
     d5c:	0f 91       	pop	r16
     d5e:	08 95       	ret

00000d60 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
     d60:	1f 93       	push	r17
     d62:	18 2f       	mov	r17, r24
    uint8_t pos;
	pos = lcd_getxy();   // read busy-flag and address counter
     d64:	c7 df       	rcall	.-114    	; 0xcf4 <lcd_getxy>
    
	if (c=='\n')
     d66:	1a 30       	cpi	r17, 0x0A	; 10
     d68:	39 f4       	brne	.+14     	; 0xd78 <lcd_putc+0x18>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
     d6a:	80 34       	cpi	r24, 0x40	; 64
     d6c:	80 f4       	brcc	.+32     	; 0xd8e <lcd_putc+0x2e>
        addressCounter = LCD_START_LINE2;
    else
	#ifdef LCD_AUTO_SCROLL
	lcd_scrollup();
	lcd_waitbusy();
     d6e:	ad df       	rcall	.-166    	; 0xcca <lcd_waitbusy>
		#else
	    addressCounter = LCD_START_LINE1;
		#endif
	}
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
     d70:	80 ec       	ldi	r24, 0xC0	; 192
     d72:	b0 df       	rcall	.-160    	; 0xcd4 <lcd_command>
        lcd_waitbusy();
#endif
        // lcd_write(c, 1);
    }

}/* lcd_putc */
     d74:	1f 91       	pop	r17
     d76:	08 95       	ret
    }
    else
    {
		// mtmt changed order to fix autowrap first write to lcd then 
		// check position
		lcd_write(c, 1);
     d78:	81 2f       	mov	r24, r17
     d7a:	61 e0       	ldi	r22, 0x01	; 1
     d7c:	29 df       	rcall	.-430    	; 0xbd0 <lcd_write>
		pos = lcd_getxy();   // read busy-flag and address counter
     d7e:	ba df       	rcall	.-140    	; 0xcf4 <lcd_getxy>
#if LCD_WRAP_LINES==1
#if LCD_LINES==1
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH )
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
#elif LCD_LINES==2
        if ( pos == LCD_START_LINE1+LCD_DISP_LENGTH )
     d80:	88 31       	cpi	r24, 0x18	; 24
     d82:	49 f0       	breq	.+18     	; 0xd96 <lcd_putc+0x36>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);    
//        else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH )
//            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ) {
     d84:	88 35       	cpi	r24, 0x58	; 88
     d86:	29 f0       	breq	.+10     	; 0xd92 <lcd_putc+0x32>
			#else
			lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
			#endif
		}
#endif
        lcd_waitbusy();
     d88:	a0 df       	rcall	.-192    	; 0xcca <lcd_waitbusy>
#endif
        // lcd_write(c, 1);
    }

}/* lcd_putc */
     d8a:	1f 91       	pop	r17
     d8c:	08 95       	ret
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
        addressCounter = LCD_START_LINE2;
    else
	#ifdef LCD_AUTO_SCROLL
	lcd_scrollup();
     d8e:	c3 df       	rcall	.-122    	; 0xd16 <lcd_scrollup>
     d90:	ee cf       	rjmp	.-36     	; 0xd6e <lcd_putc+0xe>
//        else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH )
//            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        else if ( pos == LCD_START_LINE2+LCD_DISP_LENGTH ) {
			// mtmt call to autoscroll
			#ifdef LCD_AUTO_SCROLL
			lcd_scrollup();
     d92:	c1 df       	rcall	.-126    	; 0xd16 <lcd_scrollup>
			lcd_waitbusy();
     d94:	9a df       	rcall	.-204    	; 0xcca <lcd_waitbusy>
			lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2,0);
     d96:	80 ec       	ldi	r24, 0xC0	; 192
     d98:	60 e0       	ldi	r22, 0x00	; 0
     d9a:	1a df       	rcall	.-460    	; 0xbd0 <lcd_write>
			#else
			lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
			#endif
		}
#endif
        lcd_waitbusy();
     d9c:	96 df       	rcall	.-212    	; 0xcca <lcd_waitbusy>
     d9e:	f5 cf       	rjmp	.-22     	; 0xd8a <lcd_putc+0x2a>

00000da0 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
     da0:	cf 93       	push	r28
     da2:	df 93       	push	r29
     da4:	fc 01       	movw	r30, r24
    register char c;

    while ( (c = *s++) ) {
     da6:	80 81       	ld	r24, Z
     da8:	88 23       	and	r24, r24
     daa:	31 f0       	breq	.+12     	; 0xdb8 <lcd_puts+0x18>
     dac:	ef 01       	movw	r28, r30
        lcd_putc(c);
     dae:	d8 df       	rcall	.-80     	; 0xd60 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	21 96       	adiw	r28, 0x01	; 1
     db4:	88 23       	and	r24, r24
     db6:	d9 f7       	brne	.-10     	; 0xdae <lcd_puts+0xe>
        lcd_putc(c);
    }

}/* lcd_puts */
     db8:	df 91       	pop	r29
     dba:	cf 91       	pop	r28
     dbc:	08 95       	ret

00000dbe <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
     dbe:	cf 93       	push	r28
     dc0:	df 93       	push	r29
     dc2:	fc 01       	movw	r30, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     dc4:	84 91       	lpm	r24, Z+
     dc6:	88 23       	and	r24, r24
     dc8:	41 f0       	breq	.+16     	; 0xdda <lcd_puts_p+0x1c>
     dca:	ef 01       	movw	r28, r30
     dcc:	21 96       	adiw	r28, 0x01	; 1
        lcd_putc(c);
     dce:	c8 df       	rcall	.-112    	; 0xd60 <lcd_putc>
     dd0:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     dd2:	21 96       	adiw	r28, 0x01	; 1
     dd4:	84 91       	lpm	r24, Z+
     dd6:	88 23       	and	r24, r24
     dd8:	d1 f7       	brne	.-12     	; 0xdce <lcd_puts_p+0x10>
        lcd_putc(c);
    }

}/* lcd_puts_p */
     dda:	df 91       	pop	r29
     ddc:	cf 91       	pop	r28
     dde:	08 95       	ret

00000de0 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     de0:	ff 92       	push	r15
     de2:	0f 93       	push	r16
     de4:	1f 93       	push	r17
     de6:	f8 2e       	mov	r15, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     de8:	8b 9a       	sbi	0x11, 3	; 17
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     dea:	8a 9a       	sbi	0x11, 2	; 17
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     dec:	b8 9a       	sbi	0x17, 0	; 23
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     dee:	8c 9a       	sbi	0x11, 4	; 17
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     df0:	8d 9a       	sbi	0x11, 5	; 17
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     df2:	8e 9a       	sbi	0x11, 6	; 17
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     df4:	8f 9a       	sbi	0x11, 7	; 17
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     df6:	80 e3       	ldi	r24, 0x30	; 48
     df8:	95 e7       	ldi	r25, 0x75	; 117
     dfa:	01 97       	sbiw	r24, 0x01	; 1
     dfc:	f1 f7       	brne	.-4      	; 0xdfa <lcd_init+0x1a>
    }
	
    delay(DELAY_RESET);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
     dfe:	95 9a       	sbi	0x12, 5	; 18
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
     e00:	94 9a       	sbi	0x12, 4	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     e02:	c0 9a       	sbi	0x18, 0	; 24
    lcd_e_delay();
     e04:	00 c0       	rjmp	.+0      	; 0xe06 <lcd_init+0x26>
    lcd_e_low();
     e06:	c0 98       	cbi	0x18, 0	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     e08:	80 e1       	ldi	r24, 0x10	; 16
     e0a:	97 e2       	ldi	r25, 0x27	; 39
     e0c:	01 97       	sbiw	r24, 0x01	; 1
     e0e:	f1 f7       	brne	.-4      	; 0xe0c <lcd_init+0x2c>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     e10:	c0 9a       	sbi	0x18, 0	; 24
    lcd_e_delay();
     e12:	00 c0       	rjmp	.+0      	; 0xe14 <lcd_init+0x34>
    lcd_e_low();
     e14:	c0 98       	cbi	0x18, 0	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     e16:	08 ec       	ldi	r16, 0xC8	; 200
     e18:	10 e0       	ldi	r17, 0x00	; 0
     e1a:	c8 01       	movw	r24, r16
     e1c:	01 97       	sbiw	r24, 0x01	; 1
     e1e:	f1 f7       	brne	.-4      	; 0xe1c <lcd_init+0x3c>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     e20:	c0 9a       	sbi	0x18, 0	; 24
    lcd_e_delay();
     e22:	00 c0       	rjmp	.+0      	; 0xe24 <lcd_init+0x44>
    lcd_e_low();
     e24:	c0 98       	cbi	0x18, 0	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     e26:	c8 01       	movw	r24, r16
     e28:	01 97       	sbiw	r24, 0x01	; 1
     e2a:	f1 f7       	brne	.-4      	; 0xe28 <lcd_init+0x48>
    //LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
    //lcd_e_toggle();
#if LCD_LINES==1
    lcd_write(LCD_FUNCTION_4BIT_1LINE,0);  
#elif LCD_LINES==2
    lcd_write(LCD_FUNCTION_4BIT_2LINES,0);  
     e2c:	88 e2       	ldi	r24, 0x28	; 40
     e2e:	60 e0       	ldi	r22, 0x00	; 0
     e30:	cf de       	rcall	.-610    	; 0xbd0 <lcd_write>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
     e32:	c8 01       	movw	r24, r16
     e34:	01 97       	sbiw	r24, 0x01	; 1
     e36:	f1 f7       	brne	.-4      	; 0xe34 <lcd_init+0x54>
    lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                 
    delay(DELAY_INIT_2);                              /* wait 64us                    */
    lcd_write(LCD_FUNCTION_8BIT_1LINE,0);   /* function set: 8bit interface */                
    delay(DELAY_INIT_2);                              /* wait 64us                    */
#endif
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     e38:	88 e2       	ldi	r24, 0x28	; 40
     e3a:	4c df       	rcall	.-360    	; 0xcd4 <lcd_command>
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     e3c:	88 e0       	ldi	r24, 0x08	; 8
     e3e:	4a df       	rcall	.-364    	; 0xcd4 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
     e40:	64 df       	rcall	.-312    	; 0xd0a <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     e42:	86 e0       	ldi	r24, 0x06	; 6
     e44:	47 df       	rcall	.-370    	; 0xcd4 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     e46:	8f 2d       	mov	r24, r15
     e48:	45 df       	rcall	.-374    	; 0xcd4 <lcd_command>

}/* lcd_init */
     e4a:	1f 91       	pop	r17
     e4c:	0f 91       	pop	r16
     e4e:	ff 90       	pop	r15
     e50:	08 95       	ret

00000e52 <cheapitoa>:

void cheapitoa (int16_t val, char* buff) 
//quick conversion of a max. 10 bit long uint to a 10-base string of fixed length
//optimized for 8-bit processor
//max value = 2^10 - 1  =1023
{
     e52:	9c 01       	movw	r18, r24
     e54:	fb 01       	movw	r30, r22
	if (val < 0){buff[0] = '-';
     e56:	97 fd       	sbrc	r25, 7
     e58:	4c c0       	rjmp	.+152    	; 0xef2 <cheapitoa+0xa0>
		val = -val;
	}else{buff[0] = ' ';};
     e5a:	80 e2       	ldi	r24, 0x20	; 32
     e5c:	80 83       	st	Z, r24
	
	if (val < 1000){
     e5e:	83 e0       	ldi	r24, 0x03	; 3
     e60:	28 3e       	cpi	r18, 0xE8	; 232
     e62:	38 07       	cpc	r19, r24
     e64:	3c f5       	brge	.+78     	; 0xeb4 <cheapitoa+0x62>
		buff[1] = '0';
     e66:	80 e3       	ldi	r24, 0x30	; 48
     e68:	81 83       	std	Z+1, r24	; 0x01
	}else{
		buff[1] = '1';
		val = val - 1000;
	}
	if (val >= 900){buff[2]='9';}
     e6a:	83 e0       	ldi	r24, 0x03	; 3
     e6c:	24 38       	cpi	r18, 0x84	; 132
     e6e:	38 07       	cpc	r19, r24
     e70:	4c f5       	brge	.+82     	; 0xec4 <cheapitoa+0x72>
	else if (val >= 800){buff[2]='8';}
     e72:	83 e0       	ldi	r24, 0x03	; 3
     e74:	20 32       	cpi	r18, 0x20	; 32
     e76:	38 07       	cpc	r19, r24
     e78:	44 f5       	brge	.+80     	; 0xeca <cheapitoa+0x78>
	else if (val >= 700){buff[2]='7';}
     e7a:	82 e0       	ldi	r24, 0x02	; 2
     e7c:	2c 3b       	cpi	r18, 0xBC	; 188
     e7e:	38 07       	cpc	r19, r24
     e80:	f4 f5       	brge	.+124    	; 0xefe <cheapitoa+0xac>
	else if (val >= 600){buff[2]='6';}
     e82:	82 e0       	ldi	r24, 0x02	; 2
     e84:	28 35       	cpi	r18, 0x58	; 88
     e86:	38 07       	cpc	r19, r24
     e88:	ec f5       	brge	.+122    	; 0xf04 <cheapitoa+0xb2>
	else if (val >= 500){buff[2]='5';}
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	24 3f       	cpi	r18, 0xF4	; 244
     e8e:	38 07       	cpc	r19, r24
     e90:	e4 f5       	brge	.+120    	; 0xf0a <cheapitoa+0xb8>
	else if (val >= 400){buff[2]='4';}
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	20 39       	cpi	r18, 0x90	; 144
     e96:	38 07       	cpc	r19, r24
     e98:	dc f5       	brge	.+118    	; 0xf10 <cheapitoa+0xbe>
	else if (val >= 300){buff[2]='3';}
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	2c 32       	cpi	r18, 0x2C	; 44
     e9e:	38 07       	cpc	r19, r24
     ea0:	d4 f5       	brge	.+116    	; 0xf16 <cheapitoa+0xc4>
	else if (val >= 200){buff[2]='2';}
     ea2:	28 3c       	cpi	r18, 0xC8	; 200
     ea4:	31 05       	cpc	r19, r1
     ea6:	d4 f5       	brge	.+116    	; 0xf1c <cheapitoa+0xca>
	else if (val >= 100){buff[2]='1';}
     ea8:	24 36       	cpi	r18, 0x64	; 100
     eaa:	31 05       	cpc	r19, r1
     eac:	d4 f5       	brge	.+116    	; 0xf22 <cheapitoa+0xd0>
	else 				{buff[2]='0';}
     eae:	80 e3       	ldi	r24, 0x30	; 48
     eb0:	82 83       	std	Z+2, r24	; 0x02
     eb2:	0d c0       	rjmp	.+26     	; 0xece <cheapitoa+0x7c>
	}else{buff[0] = ' ';};
	
	if (val < 1000){
		buff[1] = '0';
	}else{
		buff[1] = '1';
     eb4:	81 e3       	ldi	r24, 0x31	; 49
     eb6:	81 83       	std	Z+1, r24	; 0x01
		val = val - 1000;
     eb8:	28 5e       	subi	r18, 0xE8	; 232
     eba:	33 40       	sbci	r19, 0x03	; 3
	}
	if (val >= 900){buff[2]='9';}
     ebc:	83 e0       	ldi	r24, 0x03	; 3
     ebe:	24 38       	cpi	r18, 0x84	; 132
     ec0:	38 07       	cpc	r19, r24
     ec2:	bc f2       	brlt	.-82     	; 0xe72 <cheapitoa+0x20>
     ec4:	89 e3       	ldi	r24, 0x39	; 57
     ec6:	82 83       	std	Z+2, r24	; 0x02
     ec8:	02 c0       	rjmp	.+4      	; 0xece <cheapitoa+0x7c>
	else if (val >= 800){buff[2]='8';}
     eca:	88 e3       	ldi	r24, 0x38	; 56
     ecc:	82 83       	std	Z+2, r24	; 0x02
	else if (val >= 300){buff[2]='3';}
	else if (val >= 200){buff[2]='2';}
	else if (val >= 100){buff[2]='1';}
	else 				{buff[2]='0';}
	//val = val - (((uint8_t) buff[1])-0x30)*100;//substract second digit
	val = val%100;
     ece:	c9 01       	movw	r24, r18
     ed0:	64 e6       	ldi	r22, 0x64	; 100
     ed2:	70 e0       	ldi	r23, 0x00	; 0
     ed4:	6d d2       	rcall	.+1242   	; 0x13b0 <__divmodhi4>
     ed6:	9c 01       	movw	r18, r24
	buff[3] = 0x30 + val/10;
     ed8:	6a e0       	ldi	r22, 0x0A	; 10
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	69 d2       	rcall	.+1234   	; 0x13b0 <__divmodhi4>
     ede:	60 5d       	subi	r22, 0xD0	; 208
     ee0:	63 83       	std	Z+3, r22	; 0x03
	buff[4] = 0x30 + val%10;
     ee2:	c9 01       	movw	r24, r18
     ee4:	6a e0       	ldi	r22, 0x0A	; 10
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	63 d2       	rcall	.+1222   	; 0x13b0 <__divmodhi4>
     eea:	80 5d       	subi	r24, 0xD0	; 208
     eec:	84 83       	std	Z+4, r24	; 0x04
	buff[5] = 0;
     eee:	15 82       	std	Z+5, r1	; 0x05
	
}
     ef0:	08 95       	ret
void cheapitoa (int16_t val, char* buff) 
//quick conversion of a max. 10 bit long uint to a 10-base string of fixed length
//optimized for 8-bit processor
//max value = 2^10 - 1  =1023
{
	if (val < 0){buff[0] = '-';
     ef2:	8d e2       	ldi	r24, 0x2D	; 45
     ef4:	80 83       	st	Z, r24
		val = -val;
     ef6:	30 95       	com	r19
     ef8:	21 95       	neg	r18
     efa:	3f 4f       	sbci	r19, 0xFF	; 255
     efc:	b0 cf       	rjmp	.-160    	; 0xe5e <cheapitoa+0xc>
		buff[1] = '1';
		val = val - 1000;
	}
	if (val >= 900){buff[2]='9';}
	else if (val >= 800){buff[2]='8';}
	else if (val >= 700){buff[2]='7';}
     efe:	87 e3       	ldi	r24, 0x37	; 55
     f00:	82 83       	std	Z+2, r24	; 0x02
     f02:	e5 cf       	rjmp	.-54     	; 0xece <cheapitoa+0x7c>
	else if (val >= 600){buff[2]='6';}
     f04:	86 e3       	ldi	r24, 0x36	; 54
     f06:	82 83       	std	Z+2, r24	; 0x02
     f08:	e2 cf       	rjmp	.-60     	; 0xece <cheapitoa+0x7c>
	else if (val >= 500){buff[2]='5';}
     f0a:	85 e3       	ldi	r24, 0x35	; 53
     f0c:	82 83       	std	Z+2, r24	; 0x02
     f0e:	df cf       	rjmp	.-66     	; 0xece <cheapitoa+0x7c>
	else if (val >= 400){buff[2]='4';}
     f10:	84 e3       	ldi	r24, 0x34	; 52
     f12:	82 83       	std	Z+2, r24	; 0x02
     f14:	dc cf       	rjmp	.-72     	; 0xece <cheapitoa+0x7c>
	else if (val >= 300){buff[2]='3';}
     f16:	83 e3       	ldi	r24, 0x33	; 51
     f18:	82 83       	std	Z+2, r24	; 0x02
     f1a:	d9 cf       	rjmp	.-78     	; 0xece <cheapitoa+0x7c>
	else if (val >= 200){buff[2]='2';}
     f1c:	82 e3       	ldi	r24, 0x32	; 50
     f1e:	82 83       	std	Z+2, r24	; 0x02
     f20:	d6 cf       	rjmp	.-84     	; 0xece <cheapitoa+0x7c>
	else if (val >= 100){buff[2]='1';}
     f22:	81 e3       	ldi	r24, 0x31	; 49
     f24:	82 83       	std	Z+2, r24	; 0x02
     f26:	d3 cf       	rjmp	.-90     	; 0xece <cheapitoa+0x7c>

00000f28 <convert_print_value>:
		lcd_putc(' ');
		//lcd_puts(displ_buff);

}
 
void convert_print_value(uint8_t posx, uint8_t posy, float value, char* displ_buff){
     f28:	ef 92       	push	r14
     f2a:	ff 92       	push	r15
     f2c:	0f 93       	push	r16
     f2e:	1f 93       	push	r17
     f30:	cf 93       	push	r28
     f32:	df 93       	push	r29
     f34:	f8 2e       	mov	r15, r24
     f36:	e6 2e       	mov	r14, r22
     f38:	e8 01       	movw	r28, r16
		itoa( value, displ_buff, 10);
     f3a:	ca 01       	movw	r24, r20
     f3c:	b9 01       	movw	r22, r18
     f3e:	ee d0       	rcall	.+476    	; 0x111c <__fixsfsi>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	b8 01       	movw	r22, r16
     f46:	4a e0       	ldi	r20, 0x0A	; 10
     f48:	50 e0       	ldi	r21, 0x00	; 0
     f4a:	aa d2       	rcall	.+1364   	; 0x14a0 <itoa>
		//trick the div by 1000 by placing a comma 
		uint8_t len = strlen(displ_buff);
     f4c:	f8 01       	movw	r30, r16
     f4e:	01 90       	ld	r0, Z+
     f50:	00 20       	and	r0, r0
     f52:	e9 f7       	brne	.-6      	; 0xf4e <convert_print_value+0x26>
     f54:	31 97       	sbiw	r30, 0x01	; 1
     f56:	e0 1b       	sub	r30, r16
		//copy the last digits to another buffer for placing them on the display after the comma
        char last_two_digits[2]; 

		if (len >=2 ){ // if there are decimal digits
     f58:	e2 30       	cpi	r30, 0x02	; 2
     f5a:	08 f1       	brcs	.+66     	; 0xf9e <convert_print_value+0x76>
			last_two_digits[0] = displ_buff[len-2];
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	32 97       	sbiw	r30, 0x02	; 2
     f60:	d8 01       	movw	r26, r16
     f62:	ae 0f       	add	r26, r30
     f64:	bf 1f       	adc	r27, r31
     f66:	0c 91       	ld	r16, X
			last_two_digits[1] = displ_buff[len-1];
     f68:	31 96       	adiw	r30, 0x01	; 1
     f6a:	ec 0f       	add	r30, r28
     f6c:	fd 1f       	adc	r31, r29
     f6e:	10 81       	ld	r17, Z
			displ_buff[len-2] = '.';
     f70:	8e e2       	ldi	r24, 0x2E	; 46
     f72:	8c 93       	st	X, r24
			displ_buff[len-1] = 0; //end string
     f74:	10 82       	st	Z, r1
			last_two_digits[0] = displ_buff[len-1];
			last_two_digits[1] = ' ';		
			displ_buff[1] = 0; //end string
		};
		
		lcd_gotoxy(posx,posy); 
     f76:	8f 2d       	mov	r24, r15
     f78:	6e 2d       	mov	r22, r14
     f7a:	b4 de       	rcall	.-664    	; 0xce4 <lcd_gotoxy>
		lcd_puts(displ_buff);
     f7c:	ce 01       	movw	r24, r28
     f7e:	10 df       	rcall	.-480    	; 0xda0 <lcd_puts>
		
		//now write the last digits
		lcd_putc(last_two_digits[0]);
     f80:	80 2f       	mov	r24, r16
     f82:	ee de       	rcall	.-548    	; 0xd60 <lcd_putc>
        lcd_putc(last_two_digits[1]);
     f84:	81 2f       	mov	r24, r17
     f86:	ec de       	rcall	.-552    	; 0xd60 <lcd_putc>
		lcd_putc(' ');
     f88:	80 e2       	ldi	r24, 0x20	; 32
     f8a:	ea de       	rcall	.-556    	; 0xd60 <lcd_putc>
		lcd_putc(' ');
     f8c:	80 e2       	ldi	r24, 0x20	; 32
     f8e:	e8 de       	rcall	.-560    	; 0xd60 <lcd_putc>
}
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	1f 91       	pop	r17
     f96:	0f 91       	pop	r16
     f98:	ff 90       	pop	r15
     f9a:	ef 90       	pop	r14
     f9c:	08 95       	ret
			displ_buff[0] = '.';
			last_two_digits[0] = displ_buff[len-2];
			last_two_digits[1] = displ_buff[len-1];		
			displ_buff[1] = 0; //end string
		}else{ //len ==1
			displ_buff[0] = '.';
     f9e:	8e e2       	ldi	r24, 0x2E	; 46
     fa0:	88 83       	st	Y, r24
			last_two_digits[0] = displ_buff[len-1];
     fa2:	c8 01       	movw	r24, r16
     fa4:	8e 0f       	add	r24, r30
     fa6:	91 1d       	adc	r25, r1
     fa8:	fc 01       	movw	r30, r24
     faa:	31 97       	sbiw	r30, 0x01	; 1
     fac:	00 81       	ld	r16, Z
			last_two_digits[1] = ' ';		
			displ_buff[1] = 0; //end string
     fae:	19 82       	std	Y+1, r1	; 0x01
     fb0:	10 e2       	ldi	r17, 0x20	; 32
     fb2:	e1 cf       	rjmp	.-62     	; 0xf76 <convert_print_value+0x4e>

00000fb4 <convert_print_value_mult_1000>:
	buff[5] = 0;
	
}


void convert_print_value_mult_1000(uint8_t posx, uint8_t posy, float value, char* displ_buff){
     fb4:	cf 92       	push	r12
     fb6:	df 92       	push	r13
     fb8:	ef 92       	push	r14
     fba:	ff 92       	push	r15
     fbc:	0f 93       	push	r16
     fbe:	1f 93       	push	r17
     fc0:	cf 93       	push	r28
     fc2:	df 93       	push	r29
     fc4:	f8 2e       	mov	r15, r24
     fc6:	e6 2e       	mov	r14, r22
     fc8:	68 01       	movw	r12, r16
		itoa( value, displ_buff, 10);
     fca:	ca 01       	movw	r24, r20
     fcc:	b9 01       	movw	r22, r18
     fce:	a6 d0       	rcall	.+332    	; 0x111c <__fixsfsi>
     fd0:	dc 01       	movw	r26, r24
     fd2:	cb 01       	movw	r24, r22
     fd4:	b8 01       	movw	r22, r16
     fd6:	4a e0       	ldi	r20, 0x0A	; 10
     fd8:	50 e0       	ldi	r21, 0x00	; 0
     fda:	62 d2       	rcall	.+1220   	; 0x14a0 <itoa>
		//trick the div by 1000 by placing a comma 
		uint8_t len = strlen(displ_buff);
     fdc:	d8 01       	movw	r26, r16
     fde:	0d 90       	ld	r0, X+
     fe0:	00 20       	and	r0, r0
     fe2:	e9 f7       	brne	.-6      	; 0xfde <convert_print_value_mult_1000+0x2a>
     fe4:	8d 01       	movw	r16, r26
     fe6:	01 50       	subi	r16, 0x01	; 1
     fe8:	10 40       	sbci	r17, 0x00	; 0
     fea:	0c 19       	sub	r16, r12
     fec:	1d 09       	sbc	r17, r13
     fee:	10 2f       	mov	r17, r16
		int8_t commapos = len - 3; //3 decimal places, we divide the value by 1000
		if (commapos < 0) commapos = 0;
		//if len < 4, comma will be at first place
		//if len == 4, comma will be after the first two digits
		lcd_gotoxy(posx,posy); 
     ff0:	8f 2d       	mov	r24, r15
     ff2:	6e 2d       	mov	r22, r14
     ff4:	77 de       	rcall	.-786    	; 0xce4 <lcd_gotoxy>
		for (uint8_t i=0; i < len; i++){
     ff6:	00 23       	and	r16, r16
     ff8:	c9 f0       	breq	.+50     	; 0x102c <convert_print_value_mult_1000+0x78>

void convert_print_value_mult_1000(uint8_t posx, uint8_t posy, float value, char* displ_buff){
		itoa( value, displ_buff, 10);
		//trick the div by 1000 by placing a comma 
		uint8_t len = strlen(displ_buff);
		int8_t commapos = len - 3; //3 decimal places, we divide the value by 1000
     ffa:	80 2f       	mov	r24, r16
     ffc:	83 50       	subi	r24, 0x03	; 3
     ffe:	87 fd       	sbrc	r24, 7
    1000:	22 c0       	rjmp	.+68     	; 0x1046 <convert_print_value_mult_1000+0x92>
    1002:	e8 2e       	mov	r14, r24
    1004:	ff 24       	eor	r15, r15
    1006:	e7 fc       	sbrc	r14, 7
    1008:	f0 94       	com	r15
    100a:	c0 e0       	ldi	r28, 0x00	; 0
    100c:	d0 e0       	ldi	r29, 0x00	; 0
    100e:	08 c0       	rjmp	.+16     	; 0x1020 <convert_print_value_mult_1000+0x6c>
		//if len < 4, comma will be at first place
		//if len == 4, comma will be after the first two digits
		lcd_gotoxy(posx,posy); 
		for (uint8_t i=0; i < len; i++){
			if (i==commapos) lcd_putc('.'); 
			lcd_putc(displ_buff[i]);
    1010:	f6 01       	movw	r30, r12
    1012:	ec 0f       	add	r30, r28
    1014:	fd 1f       	adc	r31, r29
    1016:	80 81       	ld	r24, Z
    1018:	a3 de       	rcall	.-698    	; 0xd60 <lcd_putc>
    101a:	21 96       	adiw	r28, 0x01	; 1
		int8_t commapos = len - 3; //3 decimal places, we divide the value by 1000
		if (commapos < 0) commapos = 0;
		//if len < 4, comma will be at first place
		//if len == 4, comma will be after the first two digits
		lcd_gotoxy(posx,posy); 
		for (uint8_t i=0; i < len; i++){
    101c:	c1 17       	cp	r28, r17
    101e:	30 f4       	brcc	.+12     	; 0x102c <convert_print_value_mult_1000+0x78>
			if (i==commapos) lcd_putc('.'); 
    1020:	ce 15       	cp	r28, r14
    1022:	df 05       	cpc	r29, r15
    1024:	a9 f7       	brne	.-22     	; 0x1010 <convert_print_value_mult_1000+0x5c>
    1026:	8e e2       	ldi	r24, 0x2E	; 46
    1028:	9b de       	rcall	.-714    	; 0xd60 <lcd_putc>
    102a:	f2 cf       	rjmp	.-28     	; 0x1010 <convert_print_value_mult_1000+0x5c>
			lcd_putc(displ_buff[i]);
		}

		lcd_putc(' ');
    102c:	80 e2       	ldi	r24, 0x20	; 32
    102e:	98 de       	rcall	.-720    	; 0xd60 <lcd_putc>
		lcd_putc(' ');
    1030:	80 e2       	ldi	r24, 0x20	; 32
    1032:	96 de       	rcall	.-724    	; 0xd60 <lcd_putc>
		//lcd_puts(displ_buff);

}
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	1f 91       	pop	r17
    103a:	0f 91       	pop	r16
    103c:	ff 90       	pop	r15
    103e:	ef 90       	pop	r14
    1040:	df 90       	pop	r13
    1042:	cf 90       	pop	r12
    1044:	08 95       	ret

void convert_print_value_mult_1000(uint8_t posx, uint8_t posy, float value, char* displ_buff){
		itoa( value, displ_buff, 10);
		//trick the div by 1000 by placing a comma 
		uint8_t len = strlen(displ_buff);
		int8_t commapos = len - 3; //3 decimal places, we divide the value by 1000
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	dc cf       	rjmp	.-72     	; 0x1002 <convert_print_value_mult_1000+0x4e>

0000104a <__subsf3>:
    104a:	50 58       	subi	r21, 0x80	; 128

0000104c <__addsf3>:
    104c:	bb 27       	eor	r27, r27
    104e:	aa 27       	eor	r26, r26
    1050:	0e d0       	rcall	.+28     	; 0x106e <__addsf3x>
    1052:	0d c1       	rjmp	.+538    	; 0x126e <__fp_round>
    1054:	fe d0       	rcall	.+508    	; 0x1252 <__fp_pscA>
    1056:	30 f0       	brcs	.+12     	; 0x1064 <__addsf3+0x18>
    1058:	03 d1       	rcall	.+518    	; 0x1260 <__fp_pscB>
    105a:	20 f0       	brcs	.+8      	; 0x1064 <__addsf3+0x18>
    105c:	31 f4       	brne	.+12     	; 0x106a <__addsf3+0x1e>
    105e:	9f 3f       	cpi	r25, 0xFF	; 255
    1060:	11 f4       	brne	.+4      	; 0x1066 <__addsf3+0x1a>
    1062:	1e f4       	brtc	.+6      	; 0x106a <__addsf3+0x1e>
    1064:	f3 c0       	rjmp	.+486    	; 0x124c <__fp_nan>
    1066:	0e f4       	brtc	.+2      	; 0x106a <__addsf3+0x1e>
    1068:	e0 95       	com	r30
    106a:	e7 fb       	bst	r30, 7
    106c:	e9 c0       	rjmp	.+466    	; 0x1240 <__fp_inf>

0000106e <__addsf3x>:
    106e:	e9 2f       	mov	r30, r25
    1070:	0f d1       	rcall	.+542    	; 0x1290 <__fp_split3>
    1072:	80 f3       	brcs	.-32     	; 0x1054 <__addsf3+0x8>
    1074:	ba 17       	cp	r27, r26
    1076:	62 07       	cpc	r22, r18
    1078:	73 07       	cpc	r23, r19
    107a:	84 07       	cpc	r24, r20
    107c:	95 07       	cpc	r25, r21
    107e:	18 f0       	brcs	.+6      	; 0x1086 <__addsf3x+0x18>
    1080:	71 f4       	brne	.+28     	; 0x109e <__addsf3x+0x30>
    1082:	9e f5       	brtc	.+102    	; 0x10ea <__addsf3x+0x7c>
    1084:	27 c1       	rjmp	.+590    	; 0x12d4 <__fp_zero>
    1086:	0e f4       	brtc	.+2      	; 0x108a <__addsf3x+0x1c>
    1088:	e0 95       	com	r30
    108a:	0b 2e       	mov	r0, r27
    108c:	ba 2f       	mov	r27, r26
    108e:	a0 2d       	mov	r26, r0
    1090:	0b 01       	movw	r0, r22
    1092:	b9 01       	movw	r22, r18
    1094:	90 01       	movw	r18, r0
    1096:	0c 01       	movw	r0, r24
    1098:	ca 01       	movw	r24, r20
    109a:	a0 01       	movw	r20, r0
    109c:	11 24       	eor	r1, r1
    109e:	ff 27       	eor	r31, r31
    10a0:	59 1b       	sub	r21, r25
    10a2:	99 f0       	breq	.+38     	; 0x10ca <__addsf3x+0x5c>
    10a4:	59 3f       	cpi	r21, 0xF9	; 249
    10a6:	50 f4       	brcc	.+20     	; 0x10bc <__addsf3x+0x4e>
    10a8:	50 3e       	cpi	r21, 0xE0	; 224
    10aa:	68 f1       	brcs	.+90     	; 0x1106 <__addsf3x+0x98>
    10ac:	1a 16       	cp	r1, r26
    10ae:	f0 40       	sbci	r31, 0x00	; 0
    10b0:	a2 2f       	mov	r26, r18
    10b2:	23 2f       	mov	r18, r19
    10b4:	34 2f       	mov	r19, r20
    10b6:	44 27       	eor	r20, r20
    10b8:	58 5f       	subi	r21, 0xF8	; 248
    10ba:	f3 cf       	rjmp	.-26     	; 0x10a2 <__addsf3x+0x34>
    10bc:	46 95       	lsr	r20
    10be:	37 95       	ror	r19
    10c0:	27 95       	ror	r18
    10c2:	a7 95       	ror	r26
    10c4:	f0 40       	sbci	r31, 0x00	; 0
    10c6:	53 95       	inc	r21
    10c8:	c9 f7       	brne	.-14     	; 0x10bc <__addsf3x+0x4e>
    10ca:	7e f4       	brtc	.+30     	; 0x10ea <__addsf3x+0x7c>
    10cc:	1f 16       	cp	r1, r31
    10ce:	ba 0b       	sbc	r27, r26
    10d0:	62 0b       	sbc	r22, r18
    10d2:	73 0b       	sbc	r23, r19
    10d4:	84 0b       	sbc	r24, r20
    10d6:	ba f0       	brmi	.+46     	; 0x1106 <__addsf3x+0x98>
    10d8:	91 50       	subi	r25, 0x01	; 1
    10da:	a1 f0       	breq	.+40     	; 0x1104 <__addsf3x+0x96>
    10dc:	ff 0f       	add	r31, r31
    10de:	bb 1f       	adc	r27, r27
    10e0:	66 1f       	adc	r22, r22
    10e2:	77 1f       	adc	r23, r23
    10e4:	88 1f       	adc	r24, r24
    10e6:	c2 f7       	brpl	.-16     	; 0x10d8 <__addsf3x+0x6a>
    10e8:	0e c0       	rjmp	.+28     	; 0x1106 <__addsf3x+0x98>
    10ea:	ba 0f       	add	r27, r26
    10ec:	62 1f       	adc	r22, r18
    10ee:	73 1f       	adc	r23, r19
    10f0:	84 1f       	adc	r24, r20
    10f2:	48 f4       	brcc	.+18     	; 0x1106 <__addsf3x+0x98>
    10f4:	87 95       	ror	r24
    10f6:	77 95       	ror	r23
    10f8:	67 95       	ror	r22
    10fa:	b7 95       	ror	r27
    10fc:	f7 95       	ror	r31
    10fe:	9e 3f       	cpi	r25, 0xFE	; 254
    1100:	08 f0       	brcs	.+2      	; 0x1104 <__addsf3x+0x96>
    1102:	b3 cf       	rjmp	.-154    	; 0x106a <__addsf3+0x1e>
    1104:	93 95       	inc	r25
    1106:	88 0f       	add	r24, r24
    1108:	08 f0       	brcs	.+2      	; 0x110c <__addsf3x+0x9e>
    110a:	99 27       	eor	r25, r25
    110c:	ee 0f       	add	r30, r30
    110e:	97 95       	ror	r25
    1110:	87 95       	ror	r24
    1112:	08 95       	ret

00001114 <__cmpsf2>:
    1114:	71 d0       	rcall	.+226    	; 0x11f8 <__fp_cmp>
    1116:	08 f4       	brcc	.+2      	; 0x111a <__cmpsf2+0x6>
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	08 95       	ret

0000111c <__fixsfsi>:
    111c:	04 d0       	rcall	.+8      	; 0x1126 <__fixunssfsi>
    111e:	68 94       	set
    1120:	b1 11       	cpse	r27, r1
    1122:	d9 c0       	rjmp	.+434    	; 0x12d6 <__fp_szero>
    1124:	08 95       	ret

00001126 <__fixunssfsi>:
    1126:	bc d0       	rcall	.+376    	; 0x12a0 <__fp_splitA>
    1128:	88 f0       	brcs	.+34     	; 0x114c <__fixunssfsi+0x26>
    112a:	9f 57       	subi	r25, 0x7F	; 127
    112c:	90 f0       	brcs	.+36     	; 0x1152 <__fixunssfsi+0x2c>
    112e:	b9 2f       	mov	r27, r25
    1130:	99 27       	eor	r25, r25
    1132:	b7 51       	subi	r27, 0x17	; 23
    1134:	a0 f0       	brcs	.+40     	; 0x115e <__fixunssfsi+0x38>
    1136:	d1 f0       	breq	.+52     	; 0x116c <__fixunssfsi+0x46>
    1138:	66 0f       	add	r22, r22
    113a:	77 1f       	adc	r23, r23
    113c:	88 1f       	adc	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	1a f0       	brmi	.+6      	; 0x1148 <__fixunssfsi+0x22>
    1142:	ba 95       	dec	r27
    1144:	c9 f7       	brne	.-14     	; 0x1138 <__fixunssfsi+0x12>
    1146:	12 c0       	rjmp	.+36     	; 0x116c <__fixunssfsi+0x46>
    1148:	b1 30       	cpi	r27, 0x01	; 1
    114a:	81 f0       	breq	.+32     	; 0x116c <__fixunssfsi+0x46>
    114c:	c3 d0       	rcall	.+390    	; 0x12d4 <__fp_zero>
    114e:	b1 e0       	ldi	r27, 0x01	; 1
    1150:	08 95       	ret
    1152:	c0 c0       	rjmp	.+384    	; 0x12d4 <__fp_zero>
    1154:	67 2f       	mov	r22, r23
    1156:	78 2f       	mov	r23, r24
    1158:	88 27       	eor	r24, r24
    115a:	b8 5f       	subi	r27, 0xF8	; 248
    115c:	39 f0       	breq	.+14     	; 0x116c <__fixunssfsi+0x46>
    115e:	b9 3f       	cpi	r27, 0xF9	; 249
    1160:	cc f3       	brlt	.-14     	; 0x1154 <__fixunssfsi+0x2e>
    1162:	86 95       	lsr	r24
    1164:	77 95       	ror	r23
    1166:	67 95       	ror	r22
    1168:	b3 95       	inc	r27
    116a:	d9 f7       	brne	.-10     	; 0x1162 <__fixunssfsi+0x3c>
    116c:	3e f4       	brtc	.+14     	; 0x117c <__fixunssfsi+0x56>
    116e:	90 95       	com	r25
    1170:	80 95       	com	r24
    1172:	70 95       	com	r23
    1174:	61 95       	neg	r22
    1176:	7f 4f       	sbci	r23, 0xFF	; 255
    1178:	8f 4f       	sbci	r24, 0xFF	; 255
    117a:	9f 4f       	sbci	r25, 0xFF	; 255
    117c:	08 95       	ret

0000117e <__floatunsisf>:
    117e:	e8 94       	clt
    1180:	09 c0       	rjmp	.+18     	; 0x1194 <__floatsisf+0x12>

00001182 <__floatsisf>:
    1182:	97 fb       	bst	r25, 7
    1184:	3e f4       	brtc	.+14     	; 0x1194 <__floatsisf+0x12>
    1186:	90 95       	com	r25
    1188:	80 95       	com	r24
    118a:	70 95       	com	r23
    118c:	61 95       	neg	r22
    118e:	7f 4f       	sbci	r23, 0xFF	; 255
    1190:	8f 4f       	sbci	r24, 0xFF	; 255
    1192:	9f 4f       	sbci	r25, 0xFF	; 255
    1194:	99 23       	and	r25, r25
    1196:	a9 f0       	breq	.+42     	; 0x11c2 <__floatsisf+0x40>
    1198:	f9 2f       	mov	r31, r25
    119a:	96 e9       	ldi	r25, 0x96	; 150
    119c:	bb 27       	eor	r27, r27
    119e:	93 95       	inc	r25
    11a0:	f6 95       	lsr	r31
    11a2:	87 95       	ror	r24
    11a4:	77 95       	ror	r23
    11a6:	67 95       	ror	r22
    11a8:	b7 95       	ror	r27
    11aa:	f1 11       	cpse	r31, r1
    11ac:	f8 cf       	rjmp	.-16     	; 0x119e <__floatsisf+0x1c>
    11ae:	fa f4       	brpl	.+62     	; 0x11ee <__floatsisf+0x6c>
    11b0:	bb 0f       	add	r27, r27
    11b2:	11 f4       	brne	.+4      	; 0x11b8 <__floatsisf+0x36>
    11b4:	60 ff       	sbrs	r22, 0
    11b6:	1b c0       	rjmp	.+54     	; 0x11ee <__floatsisf+0x6c>
    11b8:	6f 5f       	subi	r22, 0xFF	; 255
    11ba:	7f 4f       	sbci	r23, 0xFF	; 255
    11bc:	8f 4f       	sbci	r24, 0xFF	; 255
    11be:	9f 4f       	sbci	r25, 0xFF	; 255
    11c0:	16 c0       	rjmp	.+44     	; 0x11ee <__floatsisf+0x6c>
    11c2:	88 23       	and	r24, r24
    11c4:	11 f0       	breq	.+4      	; 0x11ca <__floatsisf+0x48>
    11c6:	96 e9       	ldi	r25, 0x96	; 150
    11c8:	11 c0       	rjmp	.+34     	; 0x11ec <__floatsisf+0x6a>
    11ca:	77 23       	and	r23, r23
    11cc:	21 f0       	breq	.+8      	; 0x11d6 <__floatsisf+0x54>
    11ce:	9e e8       	ldi	r25, 0x8E	; 142
    11d0:	87 2f       	mov	r24, r23
    11d2:	76 2f       	mov	r23, r22
    11d4:	05 c0       	rjmp	.+10     	; 0x11e0 <__floatsisf+0x5e>
    11d6:	66 23       	and	r22, r22
    11d8:	71 f0       	breq	.+28     	; 0x11f6 <__floatsisf+0x74>
    11da:	96 e8       	ldi	r25, 0x86	; 134
    11dc:	86 2f       	mov	r24, r22
    11de:	70 e0       	ldi	r23, 0x00	; 0
    11e0:	60 e0       	ldi	r22, 0x00	; 0
    11e2:	2a f0       	brmi	.+10     	; 0x11ee <__floatsisf+0x6c>
    11e4:	9a 95       	dec	r25
    11e6:	66 0f       	add	r22, r22
    11e8:	77 1f       	adc	r23, r23
    11ea:	88 1f       	adc	r24, r24
    11ec:	da f7       	brpl	.-10     	; 0x11e4 <__floatsisf+0x62>
    11ee:	88 0f       	add	r24, r24
    11f0:	96 95       	lsr	r25
    11f2:	87 95       	ror	r24
    11f4:	97 f9       	bld	r25, 7
    11f6:	08 95       	ret

000011f8 <__fp_cmp>:
    11f8:	99 0f       	add	r25, r25
    11fa:	00 08       	sbc	r0, r0
    11fc:	55 0f       	add	r21, r21
    11fe:	aa 0b       	sbc	r26, r26
    1200:	e0 e8       	ldi	r30, 0x80	; 128
    1202:	fe ef       	ldi	r31, 0xFE	; 254
    1204:	16 16       	cp	r1, r22
    1206:	17 06       	cpc	r1, r23
    1208:	e8 07       	cpc	r30, r24
    120a:	f9 07       	cpc	r31, r25
    120c:	c0 f0       	brcs	.+48     	; 0x123e <__fp_cmp+0x46>
    120e:	12 16       	cp	r1, r18
    1210:	13 06       	cpc	r1, r19
    1212:	e4 07       	cpc	r30, r20
    1214:	f5 07       	cpc	r31, r21
    1216:	98 f0       	brcs	.+38     	; 0x123e <__fp_cmp+0x46>
    1218:	62 1b       	sub	r22, r18
    121a:	73 0b       	sbc	r23, r19
    121c:	84 0b       	sbc	r24, r20
    121e:	95 0b       	sbc	r25, r21
    1220:	39 f4       	brne	.+14     	; 0x1230 <__fp_cmp+0x38>
    1222:	0a 26       	eor	r0, r26
    1224:	61 f0       	breq	.+24     	; 0x123e <__fp_cmp+0x46>
    1226:	23 2b       	or	r18, r19
    1228:	24 2b       	or	r18, r20
    122a:	25 2b       	or	r18, r21
    122c:	21 f4       	brne	.+8      	; 0x1236 <__fp_cmp+0x3e>
    122e:	08 95       	ret
    1230:	0a 26       	eor	r0, r26
    1232:	09 f4       	brne	.+2      	; 0x1236 <__fp_cmp+0x3e>
    1234:	a1 40       	sbci	r26, 0x01	; 1
    1236:	a6 95       	lsr	r26
    1238:	8f ef       	ldi	r24, 0xFF	; 255
    123a:	81 1d       	adc	r24, r1
    123c:	81 1d       	adc	r24, r1
    123e:	08 95       	ret

00001240 <__fp_inf>:
    1240:	97 f9       	bld	r25, 7
    1242:	9f 67       	ori	r25, 0x7F	; 127
    1244:	80 e8       	ldi	r24, 0x80	; 128
    1246:	70 e0       	ldi	r23, 0x00	; 0
    1248:	60 e0       	ldi	r22, 0x00	; 0
    124a:	08 95       	ret

0000124c <__fp_nan>:
    124c:	9f ef       	ldi	r25, 0xFF	; 255
    124e:	80 ec       	ldi	r24, 0xC0	; 192
    1250:	08 95       	ret

00001252 <__fp_pscA>:
    1252:	00 24       	eor	r0, r0
    1254:	0a 94       	dec	r0
    1256:	16 16       	cp	r1, r22
    1258:	17 06       	cpc	r1, r23
    125a:	18 06       	cpc	r1, r24
    125c:	09 06       	cpc	r0, r25
    125e:	08 95       	ret

00001260 <__fp_pscB>:
    1260:	00 24       	eor	r0, r0
    1262:	0a 94       	dec	r0
    1264:	12 16       	cp	r1, r18
    1266:	13 06       	cpc	r1, r19
    1268:	14 06       	cpc	r1, r20
    126a:	05 06       	cpc	r0, r21
    126c:	08 95       	ret

0000126e <__fp_round>:
    126e:	09 2e       	mov	r0, r25
    1270:	03 94       	inc	r0
    1272:	00 0c       	add	r0, r0
    1274:	11 f4       	brne	.+4      	; 0x127a <__fp_round+0xc>
    1276:	88 23       	and	r24, r24
    1278:	52 f0       	brmi	.+20     	; 0x128e <__fp_round+0x20>
    127a:	bb 0f       	add	r27, r27
    127c:	40 f4       	brcc	.+16     	; 0x128e <__fp_round+0x20>
    127e:	bf 2b       	or	r27, r31
    1280:	11 f4       	brne	.+4      	; 0x1286 <__fp_round+0x18>
    1282:	60 ff       	sbrs	r22, 0
    1284:	04 c0       	rjmp	.+8      	; 0x128e <__fp_round+0x20>
    1286:	6f 5f       	subi	r22, 0xFF	; 255
    1288:	7f 4f       	sbci	r23, 0xFF	; 255
    128a:	8f 4f       	sbci	r24, 0xFF	; 255
    128c:	9f 4f       	sbci	r25, 0xFF	; 255
    128e:	08 95       	ret

00001290 <__fp_split3>:
    1290:	57 fd       	sbrc	r21, 7
    1292:	90 58       	subi	r25, 0x80	; 128
    1294:	44 0f       	add	r20, r20
    1296:	55 1f       	adc	r21, r21
    1298:	59 f0       	breq	.+22     	; 0x12b0 <__fp_splitA+0x10>
    129a:	5f 3f       	cpi	r21, 0xFF	; 255
    129c:	71 f0       	breq	.+28     	; 0x12ba <__fp_splitA+0x1a>
    129e:	47 95       	ror	r20

000012a0 <__fp_splitA>:
    12a0:	88 0f       	add	r24, r24
    12a2:	97 fb       	bst	r25, 7
    12a4:	99 1f       	adc	r25, r25
    12a6:	61 f0       	breq	.+24     	; 0x12c0 <__fp_splitA+0x20>
    12a8:	9f 3f       	cpi	r25, 0xFF	; 255
    12aa:	79 f0       	breq	.+30     	; 0x12ca <__fp_splitA+0x2a>
    12ac:	87 95       	ror	r24
    12ae:	08 95       	ret
    12b0:	12 16       	cp	r1, r18
    12b2:	13 06       	cpc	r1, r19
    12b4:	14 06       	cpc	r1, r20
    12b6:	55 1f       	adc	r21, r21
    12b8:	f2 cf       	rjmp	.-28     	; 0x129e <__fp_split3+0xe>
    12ba:	46 95       	lsr	r20
    12bc:	f1 df       	rcall	.-30     	; 0x12a0 <__fp_splitA>
    12be:	08 c0       	rjmp	.+16     	; 0x12d0 <__fp_splitA+0x30>
    12c0:	16 16       	cp	r1, r22
    12c2:	17 06       	cpc	r1, r23
    12c4:	18 06       	cpc	r1, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	f1 cf       	rjmp	.-30     	; 0x12ac <__fp_splitA+0xc>
    12ca:	86 95       	lsr	r24
    12cc:	71 05       	cpc	r23, r1
    12ce:	61 05       	cpc	r22, r1
    12d0:	08 94       	sec
    12d2:	08 95       	ret

000012d4 <__fp_zero>:
    12d4:	e8 94       	clt

000012d6 <__fp_szero>:
    12d6:	bb 27       	eor	r27, r27
    12d8:	66 27       	eor	r22, r22
    12da:	77 27       	eor	r23, r23
    12dc:	cb 01       	movw	r24, r22
    12de:	97 f9       	bld	r25, 7
    12e0:	08 95       	ret

000012e2 <__gesf2>:
    12e2:	8a df       	rcall	.-236    	; 0x11f8 <__fp_cmp>
    12e4:	08 f4       	brcc	.+2      	; 0x12e8 <__gesf2+0x6>
    12e6:	8f ef       	ldi	r24, 0xFF	; 255
    12e8:	08 95       	ret

000012ea <__mulsf3>:
    12ea:	0b d0       	rcall	.+22     	; 0x1302 <__mulsf3x>
    12ec:	c0 cf       	rjmp	.-128    	; 0x126e <__fp_round>
    12ee:	b1 df       	rcall	.-158    	; 0x1252 <__fp_pscA>
    12f0:	28 f0       	brcs	.+10     	; 0x12fc <__mulsf3+0x12>
    12f2:	b6 df       	rcall	.-148    	; 0x1260 <__fp_pscB>
    12f4:	18 f0       	brcs	.+6      	; 0x12fc <__mulsf3+0x12>
    12f6:	95 23       	and	r25, r21
    12f8:	09 f0       	breq	.+2      	; 0x12fc <__mulsf3+0x12>
    12fa:	a2 cf       	rjmp	.-188    	; 0x1240 <__fp_inf>
    12fc:	a7 cf       	rjmp	.-178    	; 0x124c <__fp_nan>
    12fe:	11 24       	eor	r1, r1
    1300:	ea cf       	rjmp	.-44     	; 0x12d6 <__fp_szero>

00001302 <__mulsf3x>:
    1302:	c6 df       	rcall	.-116    	; 0x1290 <__fp_split3>
    1304:	a0 f3       	brcs	.-24     	; 0x12ee <__mulsf3+0x4>

00001306 <__mulsf3_pse>:
    1306:	95 9f       	mul	r25, r21
    1308:	d1 f3       	breq	.-12     	; 0x12fe <__mulsf3+0x14>
    130a:	95 0f       	add	r25, r21
    130c:	50 e0       	ldi	r21, 0x00	; 0
    130e:	55 1f       	adc	r21, r21
    1310:	62 9f       	mul	r22, r18
    1312:	f0 01       	movw	r30, r0
    1314:	72 9f       	mul	r23, r18
    1316:	bb 27       	eor	r27, r27
    1318:	f0 0d       	add	r31, r0
    131a:	b1 1d       	adc	r27, r1
    131c:	63 9f       	mul	r22, r19
    131e:	aa 27       	eor	r26, r26
    1320:	f0 0d       	add	r31, r0
    1322:	b1 1d       	adc	r27, r1
    1324:	aa 1f       	adc	r26, r26
    1326:	64 9f       	mul	r22, r20
    1328:	66 27       	eor	r22, r22
    132a:	b0 0d       	add	r27, r0
    132c:	a1 1d       	adc	r26, r1
    132e:	66 1f       	adc	r22, r22
    1330:	82 9f       	mul	r24, r18
    1332:	22 27       	eor	r18, r18
    1334:	b0 0d       	add	r27, r0
    1336:	a1 1d       	adc	r26, r1
    1338:	62 1f       	adc	r22, r18
    133a:	73 9f       	mul	r23, r19
    133c:	b0 0d       	add	r27, r0
    133e:	a1 1d       	adc	r26, r1
    1340:	62 1f       	adc	r22, r18
    1342:	83 9f       	mul	r24, r19
    1344:	a0 0d       	add	r26, r0
    1346:	61 1d       	adc	r22, r1
    1348:	22 1f       	adc	r18, r18
    134a:	74 9f       	mul	r23, r20
    134c:	33 27       	eor	r19, r19
    134e:	a0 0d       	add	r26, r0
    1350:	61 1d       	adc	r22, r1
    1352:	23 1f       	adc	r18, r19
    1354:	84 9f       	mul	r24, r20
    1356:	60 0d       	add	r22, r0
    1358:	21 1d       	adc	r18, r1
    135a:	82 2f       	mov	r24, r18
    135c:	76 2f       	mov	r23, r22
    135e:	6a 2f       	mov	r22, r26
    1360:	11 24       	eor	r1, r1
    1362:	9f 57       	subi	r25, 0x7F	; 127
    1364:	50 40       	sbci	r21, 0x00	; 0
    1366:	8a f0       	brmi	.+34     	; 0x138a <__mulsf3_pse+0x84>
    1368:	e1 f0       	breq	.+56     	; 0x13a2 <__mulsf3_pse+0x9c>
    136a:	88 23       	and	r24, r24
    136c:	4a f0       	brmi	.+18     	; 0x1380 <__mulsf3_pse+0x7a>
    136e:	ee 0f       	add	r30, r30
    1370:	ff 1f       	adc	r31, r31
    1372:	bb 1f       	adc	r27, r27
    1374:	66 1f       	adc	r22, r22
    1376:	77 1f       	adc	r23, r23
    1378:	88 1f       	adc	r24, r24
    137a:	91 50       	subi	r25, 0x01	; 1
    137c:	50 40       	sbci	r21, 0x00	; 0
    137e:	a9 f7       	brne	.-22     	; 0x136a <__mulsf3_pse+0x64>
    1380:	9e 3f       	cpi	r25, 0xFE	; 254
    1382:	51 05       	cpc	r21, r1
    1384:	70 f0       	brcs	.+28     	; 0x13a2 <__mulsf3_pse+0x9c>
    1386:	5c cf       	rjmp	.-328    	; 0x1240 <__fp_inf>
    1388:	a6 cf       	rjmp	.-180    	; 0x12d6 <__fp_szero>
    138a:	5f 3f       	cpi	r21, 0xFF	; 255
    138c:	ec f3       	brlt	.-6      	; 0x1388 <__mulsf3_pse+0x82>
    138e:	98 3e       	cpi	r25, 0xE8	; 232
    1390:	dc f3       	brlt	.-10     	; 0x1388 <__mulsf3_pse+0x82>
    1392:	86 95       	lsr	r24
    1394:	77 95       	ror	r23
    1396:	67 95       	ror	r22
    1398:	b7 95       	ror	r27
    139a:	f7 95       	ror	r31
    139c:	e7 95       	ror	r30
    139e:	9f 5f       	subi	r25, 0xFF	; 255
    13a0:	c1 f7       	brne	.-16     	; 0x1392 <__mulsf3_pse+0x8c>
    13a2:	fe 2b       	or	r31, r30
    13a4:	88 0f       	add	r24, r24
    13a6:	91 1d       	adc	r25, r1
    13a8:	96 95       	lsr	r25
    13aa:	87 95       	ror	r24
    13ac:	97 f9       	bld	r25, 7
    13ae:	08 95       	ret

000013b0 <__divmodhi4>:
    13b0:	97 fb       	bst	r25, 7
    13b2:	09 2e       	mov	r0, r25
    13b4:	07 26       	eor	r0, r23
    13b6:	0a d0       	rcall	.+20     	; 0x13cc <__divmodhi4_neg1>
    13b8:	77 fd       	sbrc	r23, 7
    13ba:	04 d0       	rcall	.+8      	; 0x13c4 <__divmodhi4_neg2>
    13bc:	2e d0       	rcall	.+92     	; 0x141a <__udivmodhi4>
    13be:	06 d0       	rcall	.+12     	; 0x13cc <__divmodhi4_neg1>
    13c0:	00 20       	and	r0, r0
    13c2:	1a f4       	brpl	.+6      	; 0x13ca <__divmodhi4_exit>

000013c4 <__divmodhi4_neg2>:
    13c4:	70 95       	com	r23
    13c6:	61 95       	neg	r22
    13c8:	7f 4f       	sbci	r23, 0xFF	; 255

000013ca <__divmodhi4_exit>:
    13ca:	08 95       	ret

000013cc <__divmodhi4_neg1>:
    13cc:	f6 f7       	brtc	.-4      	; 0x13ca <__divmodhi4_exit>
    13ce:	90 95       	com	r25
    13d0:	81 95       	neg	r24
    13d2:	9f 4f       	sbci	r25, 0xFF	; 255
    13d4:	08 95       	ret

000013d6 <__udivmodsi4>:
    13d6:	a1 e2       	ldi	r26, 0x21	; 33
    13d8:	1a 2e       	mov	r1, r26
    13da:	aa 1b       	sub	r26, r26
    13dc:	bb 1b       	sub	r27, r27
    13de:	fd 01       	movw	r30, r26
    13e0:	0d c0       	rjmp	.+26     	; 0x13fc <__udivmodsi4_ep>

000013e2 <__udivmodsi4_loop>:
    13e2:	aa 1f       	adc	r26, r26
    13e4:	bb 1f       	adc	r27, r27
    13e6:	ee 1f       	adc	r30, r30
    13e8:	ff 1f       	adc	r31, r31
    13ea:	a2 17       	cp	r26, r18
    13ec:	b3 07       	cpc	r27, r19
    13ee:	e4 07       	cpc	r30, r20
    13f0:	f5 07       	cpc	r31, r21
    13f2:	20 f0       	brcs	.+8      	; 0x13fc <__udivmodsi4_ep>
    13f4:	a2 1b       	sub	r26, r18
    13f6:	b3 0b       	sbc	r27, r19
    13f8:	e4 0b       	sbc	r30, r20
    13fa:	f5 0b       	sbc	r31, r21

000013fc <__udivmodsi4_ep>:
    13fc:	66 1f       	adc	r22, r22
    13fe:	77 1f       	adc	r23, r23
    1400:	88 1f       	adc	r24, r24
    1402:	99 1f       	adc	r25, r25
    1404:	1a 94       	dec	r1
    1406:	69 f7       	brne	.-38     	; 0x13e2 <__udivmodsi4_loop>
    1408:	60 95       	com	r22
    140a:	70 95       	com	r23
    140c:	80 95       	com	r24
    140e:	90 95       	com	r25
    1410:	9b 01       	movw	r18, r22
    1412:	ac 01       	movw	r20, r24
    1414:	bd 01       	movw	r22, r26
    1416:	cf 01       	movw	r24, r30
    1418:	08 95       	ret

0000141a <__udivmodhi4>:
    141a:	aa 1b       	sub	r26, r26
    141c:	bb 1b       	sub	r27, r27
    141e:	51 e1       	ldi	r21, 0x11	; 17
    1420:	07 c0       	rjmp	.+14     	; 0x1430 <__udivmodhi4_ep>

00001422 <__udivmodhi4_loop>:
    1422:	aa 1f       	adc	r26, r26
    1424:	bb 1f       	adc	r27, r27
    1426:	a6 17       	cp	r26, r22
    1428:	b7 07       	cpc	r27, r23
    142a:	10 f0       	brcs	.+4      	; 0x1430 <__udivmodhi4_ep>
    142c:	a6 1b       	sub	r26, r22
    142e:	b7 0b       	sbc	r27, r23

00001430 <__udivmodhi4_ep>:
    1430:	88 1f       	adc	r24, r24
    1432:	99 1f       	adc	r25, r25
    1434:	5a 95       	dec	r21
    1436:	a9 f7       	brne	.-22     	; 0x1422 <__udivmodhi4_loop>
    1438:	80 95       	com	r24
    143a:	90 95       	com	r25
    143c:	bc 01       	movw	r22, r24
    143e:	cd 01       	movw	r24, r26
    1440:	08 95       	ret

00001442 <atoi>:
    1442:	fc 01       	movw	r30, r24
    1444:	88 27       	eor	r24, r24
    1446:	99 27       	eor	r25, r25
    1448:	e8 94       	clt
    144a:	21 91       	ld	r18, Z+
    144c:	20 32       	cpi	r18, 0x20	; 32
    144e:	e9 f3       	breq	.-6      	; 0x144a <atoi+0x8>
    1450:	29 30       	cpi	r18, 0x09	; 9
    1452:	10 f0       	brcs	.+4      	; 0x1458 <atoi+0x16>
    1454:	2e 30       	cpi	r18, 0x0E	; 14
    1456:	c8 f3       	brcs	.-14     	; 0x144a <atoi+0x8>
    1458:	2b 32       	cpi	r18, 0x2B	; 43
    145a:	39 f0       	breq	.+14     	; 0x146a <atoi+0x28>
    145c:	2d 32       	cpi	r18, 0x2D	; 45
    145e:	31 f4       	brne	.+12     	; 0x146c <atoi+0x2a>
    1460:	68 94       	set
    1462:	03 c0       	rjmp	.+6      	; 0x146a <atoi+0x28>
    1464:	3c d0       	rcall	.+120    	; 0x14de <__mulhi_const_10>
    1466:	82 0f       	add	r24, r18
    1468:	91 1d       	adc	r25, r1
    146a:	21 91       	ld	r18, Z+
    146c:	20 53       	subi	r18, 0x30	; 48
    146e:	2a 30       	cpi	r18, 0x0A	; 10
    1470:	c8 f3       	brcs	.-14     	; 0x1464 <atoi+0x22>
    1472:	1e f4       	brtc	.+6      	; 0x147a <atoi+0x38>
    1474:	90 95       	com	r25
    1476:	81 95       	neg	r24
    1478:	9f 4f       	sbci	r25, 0xFF	; 255
    147a:	08 95       	ret

0000147c <strcat>:
    147c:	fb 01       	movw	r30, r22
    147e:	dc 01       	movw	r26, r24
    1480:	0d 90       	ld	r0, X+
    1482:	00 20       	and	r0, r0
    1484:	e9 f7       	brne	.-6      	; 0x1480 <strcat+0x4>
    1486:	11 97       	sbiw	r26, 0x01	; 1
    1488:	01 90       	ld	r0, Z+
    148a:	0d 92       	st	X+, r0
    148c:	00 20       	and	r0, r0
    148e:	e1 f7       	brne	.-8      	; 0x1488 <strcat+0xc>
    1490:	08 95       	ret

00001492 <strcpy>:
    1492:	fb 01       	movw	r30, r22
    1494:	dc 01       	movw	r26, r24
    1496:	01 90       	ld	r0, Z+
    1498:	0d 92       	st	X+, r0
    149a:	00 20       	and	r0, r0
    149c:	e1 f7       	brne	.-8      	; 0x1496 <strcpy+0x4>
    149e:	08 95       	ret

000014a0 <itoa>:
    14a0:	fb 01       	movw	r30, r22
    14a2:	9f 01       	movw	r18, r30
    14a4:	e8 94       	clt
    14a6:	42 30       	cpi	r20, 0x02	; 2
    14a8:	bc f0       	brlt	.+46     	; 0x14d8 <itoa+0x38>
    14aa:	45 32       	cpi	r20, 0x25	; 37
    14ac:	ac f4       	brge	.+42     	; 0x14d8 <itoa+0x38>
    14ae:	4a 30       	cpi	r20, 0x0A	; 10
    14b0:	29 f4       	brne	.+10     	; 0x14bc <itoa+0x1c>
    14b2:	97 fb       	bst	r25, 7
    14b4:	1e f4       	brtc	.+6      	; 0x14bc <itoa+0x1c>
    14b6:	90 95       	com	r25
    14b8:	81 95       	neg	r24
    14ba:	9f 4f       	sbci	r25, 0xFF	; 255
    14bc:	64 2f       	mov	r22, r20
    14be:	77 27       	eor	r23, r23
    14c0:	ac df       	rcall	.-168    	; 0x141a <__udivmodhi4>
    14c2:	80 5d       	subi	r24, 0xD0	; 208
    14c4:	8a 33       	cpi	r24, 0x3A	; 58
    14c6:	0c f0       	brlt	.+2      	; 0x14ca <itoa+0x2a>
    14c8:	89 5d       	subi	r24, 0xD9	; 217
    14ca:	81 93       	st	Z+, r24
    14cc:	cb 01       	movw	r24, r22
    14ce:	00 97       	sbiw	r24, 0x00	; 0
    14d0:	a9 f7       	brne	.-22     	; 0x14bc <itoa+0x1c>
    14d2:	16 f4       	brtc	.+4      	; 0x14d8 <itoa+0x38>
    14d4:	5d e2       	ldi	r21, 0x2D	; 45
    14d6:	51 93       	st	Z+, r21
    14d8:	10 82       	st	Z, r1
    14da:	c9 01       	movw	r24, r18
    14dc:	38 c0       	rjmp	.+112    	; 0x154e <strrev>

000014de <__mulhi_const_10>:
    14de:	7a e0       	ldi	r23, 0x0A	; 10
    14e0:	97 9f       	mul	r25, r23
    14e2:	90 2d       	mov	r25, r0
    14e4:	87 9f       	mul	r24, r23
    14e6:	80 2d       	mov	r24, r0
    14e8:	91 0d       	add	r25, r1
    14ea:	11 24       	eor	r1, r1
    14ec:	08 95       	ret

000014ee <__eerd_block_m8>:
    14ee:	dc 01       	movw	r26, r24
    14f0:	cb 01       	movw	r24, r22

000014f2 <__eerd_blraw_m8>:
    14f2:	fc 01       	movw	r30, r24
    14f4:	e1 99       	sbic	0x1c, 1	; 28
    14f6:	fe cf       	rjmp	.-4      	; 0x14f4 <__eerd_blraw_m8+0x2>
    14f8:	06 c0       	rjmp	.+12     	; 0x1506 <__eerd_blraw_m8+0x14>
    14fa:	ff bb       	out	0x1f, r31	; 31
    14fc:	ee bb       	out	0x1e, r30	; 30
    14fe:	e0 9a       	sbi	0x1c, 0	; 28
    1500:	31 96       	adiw	r30, 0x01	; 1
    1502:	0d b2       	in	r0, 0x1d	; 29
    1504:	0d 92       	st	X+, r0
    1506:	41 50       	subi	r20, 0x01	; 1
    1508:	50 40       	sbci	r21, 0x00	; 0
    150a:	b8 f7       	brcc	.-18     	; 0x14fa <__eerd_blraw_m8+0x8>
    150c:	08 95       	ret

0000150e <__eeupd_block_m8>:
    150e:	dc 01       	movw	r26, r24
    1510:	a4 0f       	add	r26, r20
    1512:	b5 1f       	adc	r27, r21
    1514:	41 50       	subi	r20, 0x01	; 1
    1516:	50 40       	sbci	r21, 0x00	; 0
    1518:	40 f0       	brcs	.+16     	; 0x152a <__eeupd_block_m8+0x1c>
    151a:	cb 01       	movw	r24, r22
    151c:	84 0f       	add	r24, r20
    151e:	95 1f       	adc	r25, r21
    1520:	2e 91       	ld	r18, -X
    1522:	05 d0       	rcall	.+10     	; 0x152e <__eeupd_r18_m8>
    1524:	41 50       	subi	r20, 0x01	; 1
    1526:	50 40       	sbci	r21, 0x00	; 0
    1528:	d8 f7       	brcc	.-10     	; 0x1520 <__eeupd_block_m8+0x12>
    152a:	08 95       	ret

0000152c <__eeupd_byte_m8>:
    152c:	26 2f       	mov	r18, r22

0000152e <__eeupd_r18_m8>:
    152e:	e1 99       	sbic	0x1c, 1	; 28
    1530:	fe cf       	rjmp	.-4      	; 0x152e <__eeupd_r18_m8>
    1532:	9f bb       	out	0x1f, r25	; 31
    1534:	8e bb       	out	0x1e, r24	; 30
    1536:	e0 9a       	sbi	0x1c, 0	; 28
    1538:	01 97       	sbiw	r24, 0x01	; 1
    153a:	0d b2       	in	r0, 0x1d	; 29
    153c:	02 16       	cp	r0, r18
    153e:	31 f0       	breq	.+12     	; 0x154c <__eeupd_r18_m8+0x1e>
    1540:	2d bb       	out	0x1d, r18	; 29
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	f8 94       	cli
    1546:	e2 9a       	sbi	0x1c, 2	; 28
    1548:	e1 9a       	sbi	0x1c, 1	; 28
    154a:	0f be       	out	0x3f, r0	; 63
    154c:	08 95       	ret

0000154e <strrev>:
    154e:	dc 01       	movw	r26, r24
    1550:	fc 01       	movw	r30, r24
    1552:	67 2f       	mov	r22, r23
    1554:	71 91       	ld	r23, Z+
    1556:	77 23       	and	r23, r23
    1558:	e1 f7       	brne	.-8      	; 0x1552 <strrev+0x4>
    155a:	32 97       	sbiw	r30, 0x02	; 2
    155c:	04 c0       	rjmp	.+8      	; 0x1566 <strrev+0x18>
    155e:	7c 91       	ld	r23, X
    1560:	6d 93       	st	X+, r22
    1562:	70 83       	st	Z, r23
    1564:	62 91       	ld	r22, -Z
    1566:	ae 17       	cp	r26, r30
    1568:	bf 07       	cpc	r27, r31
    156a:	c8 f3       	brcs	.-14     	; 0x155e <strrev+0x10>
    156c:	08 95       	ret

0000156e <_exit>:
    156e:	f8 94       	cli

00001570 <__stop_program>:
    1570:	ff cf       	rjmp	.-2      	; 0x1570 <__stop_program>
